import '../models/fill_blank.dart';

// Java Fill-in-the-Blanks Questions
final List<FillBlankQuestion> javaFillBlankQuestions = [
  // Introduction to Java questions
  FillBlankQuestion(
    id: 'jfb_001',
    statement: 'Java is a _____ programming language, which means it uses objects to represent data and behavior.',
    answer: 'object-oriented',
    topicId: 'java_intro',
    hint: 'Think about the paradigm that focuses on objects rather than just functions',
  ),
  FillBlankQuestion(
    id: 'jfb_002',
    statement: 'The Java Virtual Machine (JVM) allows Java to be _____, meaning it can run on any platform.',
    answer: 'platform-independent',
    topicId: 'java_intro',
    hint: 'Write once, run anywhere',
  ),
  FillBlankQuestion(
    id: 'jfb_003',
    statement: 'The entry point of a Java application is the _____ method.',
    answer: 'main',
    topicId: 'java_intro',
    hint: 'It\'s the method that gets executed when you run a Java program',
  ),
  FillBlankQuestion(
    id: 'jfb_010',
    statement: 'Java was originally developed by _____ Microsystems in 1995.',
    answer: 'Sun',
    topicId: 'java_intro',
    hint: 'The company was later acquired by Oracle',
  ),
  FillBlankQuestion(
    id: 'jfb_011',
    statement: 'Java code is first compiled into _____ and then interpreted by the JVM.',
    answer: 'bytecode',
    topicId: 'java_intro',
    hint: 'It\'s an intermediate code format that the JVM can understand',
  ),
  
  // OOP Concepts questions
  FillBlankQuestion(
    id: 'jfb_004',
    statement: 'The ability of a subclass to override methods of its superclass is called _____.',
    answer: 'polymorphism',
    topicId: 'java_oop',
    hint: 'From Greek, meaning "many forms"',
  ),
  FillBlankQuestion(
    id: 'jfb_005',
    statement: 'In Java, _____ is the mechanism to restrict access to certain components and protect data.',
    answer: 'encapsulation',
    topicId: 'java_oop',
    hint: 'It involves wrapping data and methods within a single unit',
  ),
  FillBlankQuestion(
    id: 'jfb_006',
    statement: 'The _____ keyword is used to create a subclass that inherits properties from a parent class.',
    answer: 'extends',
    topicId: 'java_oop',
    hint: 'When a class wants to inherit from another class',
  ),
  FillBlankQuestion(
    id: 'jfb_012',
    statement: 'A class that cannot be instantiated and may contain abstract methods is called an _____ class.',
    answer: 'abstract',
    topicId: 'java_oop',
    hint: 'This type of class is incomplete and meant to be extended',
  ),
  FillBlankQuestion(
    id: 'jfb_013',
    statement: 'The _____ keyword is used to prevent a method from being overridden in subclasses.',
    answer: 'final',
    topicId: 'java_oop',
    hint: 'This keyword can also be applied to variables and classes',
  ),
  
  // Exception Handling questions
  FillBlankQuestion(
    id: 'jfb_007',
    statement: 'Exception handling prevents programs from _____ due to runtime errors.',
    answer: 'crashing',
    topicId: 'java_exceptions',
    hint: 'Program termination',
  ),
  FillBlankQuestion(
    id: 'jfb_007a',
    statement: 'Java categorizes exceptions into checked, unchecked, and _____ .',
    answer: 'errors',
    topicId: 'java_exceptions',
    hint: 'Serious problems',
  ),
  FillBlankQuestion(
    id: 'jfb_007b',
    statement: '_____ exceptions must be handled at compile time.',
    answer: 'Checked',
    topicId: 'java_exceptions',
    hint: 'IOException, SQLException',
  ),
  FillBlankQuestion(
    id: 'jfb_007c',
    statement: '_____ exceptions occur at runtime and are not required to be declared.',
    answer: 'Unchecked',
    topicId: 'java_exceptions',
    hint: 'ArithmeticException, NullPointerException',
  ),
  FillBlankQuestion(
    id: 'jfb_007d',
    statement: 'The _____ block contains code that may throw an exception.',
    answer: 'try',
    topicId: 'java_exceptions',
    hint: 'First block in exception handling',
  ),
  FillBlankQuestion(
    id: 'jfb_007e',
    statement: 'The _____ block handles the exception.',
    answer: 'catch',
    topicId: 'java_exceptions',
    hint: 'Exception handler',
  ),
  FillBlankQuestion(
    id: 'jfb_007f',
    statement: 'The _____ block executes always, regardless of exception occurrence.',
    answer: 'finally',
    topicId: 'java_exceptions',
    hint: 'Cleanup block',
  ),
  FillBlankQuestion(
    id: 'jfb_007g',
    statement: 'The finally block is useful for closing resources like files, DB connections, or _____ .',
    answer: 'sockets',
    topicId: 'java_exceptions',
    hint: 'Network connections',
  ),
  FillBlankQuestion(
    id: 'jfb_007h',
    statement: 'The _____ keyword is used to explicitly throw an exception.',
    answer: 'throw',
    topicId: 'java_exceptions',
    hint: 'Manually raise exception',
  ),
  FillBlankQuestion(
    id: 'jfb_007i',
    statement: 'The _____ keyword declares exceptions a method may throw.',
    answer: 'throws',
    topicId: 'java_exceptions',
    hint: 'Method signature declaration',
  ),
  FillBlankQuestion(
    id: 'jfb_007j',
    statement: 'Custom exceptions are created by extending _____ or RuntimeException.',
    answer: 'Exception',
    topicId: 'java_exceptions',
    hint: 'Base exception class',
  ),
  FillBlankQuestion(
    id: 'jfb_007k',
    statement: '_____ is a common unchecked exception thrown when an object reference is null.',
    answer: 'NullPointerException',
    topicId: 'java_exceptions',
    hint: 'Null reference error',
  ),
  FillBlankQuestion(
    id: 'jfb_007l',
    statement: '_____ is thrown when dividing by zero.',
    answer: 'ArithmeticException',
    topicId: 'java_exceptions',
    hint: 'Math error',
  ),
  FillBlankQuestion(
    id: 'jfb_007m',
    statement: '_____ is a checked exception related to input/output operations.',
    answer: 'IOException',
    topicId: 'java_exceptions',
    hint: 'File and stream operations',
  ),
  FillBlankQuestion(
    id: 'jfb_007n',
    statement: '_____ is the parent class of all exceptions in Java.',
    answer: 'Throwable',
    topicId: 'java_exceptions',
    hint: 'Root exception class',
  ),
  FillBlankQuestion(
    id: 'jfb_007o',
    statement: 'Custom exceptions convey specific _____ logic errors.',
    answer: 'business',
    topicId: 'java_exceptions',
    hint: 'Application-specific rules',
  ),
  
  // Java Collections Framework questions
  FillBlankQuestion(
    id: 'jfb_016',
    statement: 'Java Collections Framework provides predefined data structures and _____ .',
    answer: 'algorithms',
    topicId: 'java_collections',
    hint: 'Processing methods',
  ),
  FillBlankQuestion(
    id: 'jfb_016a',
    statement: 'Collections ensure type safety and support _____ .',
    answer: 'generics',
    topicId: 'java_collections',
    hint: 'Type parameters',
  ),
  FillBlankQuestion(
    id: 'jfb_016b',
    statement: '_____ is ordered and allows duplicates.',
    answer: 'List',
    topicId: 'java_collections',
    hint: 'ArrayList, LinkedList',
  ),
  FillBlankQuestion(
    id: 'jfb_016c',
    statement: '_____ does not allow duplicates.',
    answer: 'Set',
    topicId: 'java_collections',
    hint: 'HashSet, TreeSet',
  ),
  FillBlankQuestion(
    id: 'jfb_016d',
    statement: '_____ stores key-value pairs.',
    answer: 'Map',
    topicId: 'java_collections',
    hint: 'HashMap, TreeMap',
  ),
  FillBlankQuestion(
    id: 'jfb_016e',
    statement: '_____ follows FIFO structure.',
    answer: 'Queue',
    topicId: 'java_collections',
    hint: 'First In First Out',
  ),
  FillBlankQuestion(
    id: 'jfb_016f',
    statement: '_____ is best for random access operations.',
    answer: 'ArrayList',
    topicId: 'java_collections',
    hint: 'Index-based access',
  ),
  FillBlankQuestion(
    id: 'jfb_016g',
    statement: '_____ supports fast insertions and deletions.',
    answer: 'LinkedList',
    topicId: 'java_collections',
    hint: 'Node-based structure',
  ),
  FillBlankQuestion(
    id: 'jfb_016h',
    statement: '_____ provides unordered, fast access in a Set.',
    answer: 'HashSet',
    topicId: 'java_collections',
    hint: 'Hash-based set',
  ),
  FillBlankQuestion(
    id: 'jfb_016i',
    statement: '_____ maintains insertion order in a Set.',
    answer: 'LinkedHashSet',
    topicId: 'java_collections',
    hint: 'Linked hash set',
  ),
  FillBlankQuestion(
    id: 'jfb_016j',
    statement: '_____ maintains sorted order in a Set.',
    answer: 'TreeSet',
    topicId: 'java_collections',
    hint: 'Tree-based sorted set',
  ),
  FillBlankQuestion(
    id: 'jfb_016k',
    statement: '_____ is unordered and allows null keys and values.',
    answer: 'HashMap',
    topicId: 'java_collections',
    hint: 'Hash-based map',
  ),
  FillBlankQuestion(
    id: 'jfb_016l',
    statement: '_____ maintains insertion order in a Map.',
    answer: 'LinkedHashMap',
    topicId: 'java_collections',
    hint: 'Linked hash map',
  ),
  FillBlankQuestion(
    id: 'jfb_016m',
    statement: '_____ is sorted by keys.',
    answer: 'TreeMap',
    topicId: 'java_collections',
    hint: 'Tree-based sorted map',
  ),
  FillBlankQuestion(
    id: 'jfb_016n',
    statement: 'The Collections class method _____ sorts a list.',
    answer: 'sort()',
    topicId: 'java_collections',
    hint: 'Ordering method',
  ),
  FillBlankQuestion(
    id: 'jfb_016o',
    statement: 'Always program to _____ not implementation.',
    answer: 'interface',
    topicId: 'java_collections',
    hint: 'Abstraction principle',
  ),
  
  // Multithreading questions
  FillBlankQuestion(
    id: 'jfb_021',
    statement: 'Multithreading allows _____ execution of multiple threads.',
    answer: 'concurrent',
    topicId: 'java_multithreading',
    hint: 'Simultaneous processing',
  ),
  FillBlankQuestion(
    id: 'jfb_021a',
    statement: 'A _____ is the smallest unit of execution within a process.',
    answer: 'thread',
    topicId: 'java_multithreading',
    hint: 'Execution unit',
  ),
  FillBlankQuestion(
    id: 'jfb_021b',
    statement: 'Multithreading improves performance, responsiveness, and _____ utilization.',
    answer: 'resource',
    topicId: 'java_multithreading',
    hint: 'CPU and memory',
  ),
  FillBlankQuestion(
    id: 'jfb_021c',
    statement: 'Threads share _____ memory but have individual stack memory.',
    answer: 'heap',
    topicId: 'java_multithreading',
    hint: 'Shared memory area',
  ),
  FillBlankQuestion(
    id: 'jfb_021d',
    statement: 'Two ways to create threads: extend Thread class or implement _____ interface.',
    answer: 'Runnable',
    topicId: 'java_multithreading',
    hint: 'Functional interface',
  ),
  FillBlankQuestion(
    id: 'jfb_021e',
    statement: 'The _____ method begins thread execution and calls run().',
    answer: 'start()',
    topicId: 'java_multithreading',
    hint: 'Thread activation',
  ),
  FillBlankQuestion(
    id: 'jfb_021f',
    statement: 'The _____ method contains thread code but should not be called directly.',
    answer: 'run()',
    topicId: 'java_multithreading',
    hint: 'Thread logic',
  ),
  FillBlankQuestion(
    id: 'jfb_021g',
    statement: 'The _____ method pauses thread for specified milliseconds.',
    answer: 'sleep()',
    topicId: 'java_multithreading',
    hint: 'Temporary pause',
  ),
  FillBlankQuestion(
    id: 'jfb_021h',
    statement: 'The _____ method waits for a thread to finish execution.',
    answer: 'join()',
    topicId: 'java_multithreading',
    hint: 'Wait for completion',
  ),
  FillBlankQuestion(
    id: 'jfb_021i',
    statement: 'Thread priorities range from 1 to _____ .',
    answer: '10',
    topicId: 'java_multithreading',
    hint: 'Maximum priority value',
  ),
  FillBlankQuestion(
    id: 'jfb_021j',
    statement: 'The _____ keyword ensures only one thread accesses a method at a time.',
    answer: 'synchronized',
    topicId: 'java_multithreading',
    hint: 'Thread safety',
  ),
  FillBlankQuestion(
    id: 'jfb_021k',
    statement: 'Synchronization prevents _____ conditions on shared resources.',
    answer: 'race',
    topicId: 'java_multithreading',
    hint: 'Competition between threads',
  ),
  FillBlankQuestion(
    id: 'jfb_021l',
    statement: 'The _____ method pauses a thread until notified.',
    answer: 'wait()',
    topicId: 'java_multithreading',
    hint: 'Pause and wait',
  ),
  FillBlankQuestion(
    id: 'jfb_021m',
    statement: 'The _____ method wakes up all waiting threads.',
    answer: 'notifyAll()',
    topicId: 'java_multithreading',
    hint: 'Wake all threads',
  ),
  FillBlankQuestion(
    id: 'jfb_021n',
    statement: '_____ simplifies thread management using thread pools.',
    answer: 'ExecutorService',
    topicId: 'java_multithreading',
    hint: 'Thread pool framework',
  ),
  FillBlankQuestion(
    id: 'jfb_021o',
    statement: 'Thread pools reuse threads and reduce _____ overhead.',
    answer: 'creation',
    topicId: 'java_multithreading',
    hint: 'Resource initialization',
  ),
  
  // Generics and Streams questions
  FillBlankQuestion(
    id: 'jfb_025',
    statement: 'A _____ occurs when two or more threads are waiting forever for a locked resource held by the other threads.',
    answer: 'deadlock',
    topicId: 'java_multithreading',
    hint: 'A common concurrency problem where threads are permanently blocked',
  ),
  
  // Generics and Streams questions
  FillBlankQuestion(
    id: 'jfb_026',
    statement: '_____ enable type-safe code by allowing classes and methods to operate on various types with compile-time checking.',
    answer: 'Generics',
    topicId: 'java_generics_streams',
    hint: 'Uses angle brackets like <T> for type parameters',
  ),
  FillBlankQuestion(
    id: 'jfb_027',
    statement: 'The _____ API provides functional-style operations on collections like filter, map, and reduce.',
    answer: 'Stream',
    topicId: 'java_generics_streams',
    hint: 'Introduced in Java 8 for functional programming',
  ),
  FillBlankQuestion(
    id: 'jfb_028',
    statement: 'Bounded generics use the _____ keyword to restrict the types that can be used as type arguments.',
    answer: 'extends',
    topicId: 'java_generics_streams',
    hint: 'Example: <T extends Number>',
  ),
  
  // File Handling questions
  FillBlankQuestion(
    id: 'jfb_029',
    statement: 'The _____ class is used for efficient reading of text files in Java.',
    answer: 'BufferedReader',
    topicId: 'java_file_handling',
    hint: 'Often wrapped around FileReader',
  ),
  FillBlankQuestion(
    id: 'jfb_030',
    statement: 'Try-with-_____ ensures that resources are properly closed after use.',
    answer: 'resources',
    topicId: 'java_file_handling',
    hint: 'Automatic resource management feature',
  ),
  FillBlankQuestion(
    id: 'jfb_029a',
    statement: 'The _____ package contains classes for file input and output operations in Java.',
    answer: 'java.io',
    topicId: 'java_file_handling',
    hint: 'Input/Output package',
  ),
  FillBlankQuestion(
    id: 'jfb_029b',
    statement: '_____ streams are used for reading and writing binary data like images and audio files.',
    answer: 'Byte',
    topicId: 'java_file_handling',
    hint: 'InputStream and OutputStream',
  ),
  FillBlankQuestion(
    id: 'jfb_029c',
    statement: '_____ streams are used for reading and writing text data with proper encoding.',
    answer: 'Character',
    topicId: 'java_file_handling',
    hint: 'Reader and Writer',
  ),
  FillBlankQuestion(
    id: 'jfb_029d',
    statement: 'The _____ class is used to represent files and directories in the file system.',
    answer: 'File',
    topicId: 'java_file_handling',
    hint: 'Found in java.io package',
  ),
  FillBlankQuestion(
    id: 'jfb_029e',
    statement: 'A class must implement the _____ interface to enable object serialization.',
    answer: 'Serializable',
    topicId: 'java_file_handling',
    hint: 'Marker interface for serialization',
  ),
  FillBlankQuestion(
    id: 'jfb_029f',
    statement: 'The _____ keyword prevents a field from being serialized when saving an object.',
    answer: 'transient',
    topicId: 'java_file_handling',
    hint: 'Used to skip fields during serialization',
  ),
  FillBlankQuestion(
    id: 'jfb_029g',
    statement: '_____ is the exception that must be handled when performing file operations.',
    answer: 'IOException',
    topicId: 'java_file_handling',
    hint: 'Input/Output Exception',
  ),
  FillBlankQuestion(
    id: 'jfb_029h',
    statement: 'FileInputStream and FileOutputStream work with _____ data at the byte level.',
    answer: 'binary',
    topicId: 'java_file_handling',
    hint: 'Non-text data format',
  ),
  FillBlankQuestion(
    id: 'jfb_029i',
    statement: '_____ class provides convenient methods for formatted text output to files.',
    answer: 'PrintWriter',
    topicId: 'java_file_handling',
    hint: 'Similar to System.out.println',
  ),
  FillBlankQuestion(
    id: 'jfb_029j',
    statement: '_____ writes objects to an output stream for serialization.',
    answer: 'ObjectOutputStream',
    topicId: 'java_file_handling',
    hint: 'Used with writeObject() method',
  ),
  FillBlankQuestion(
    id: 'jfb_029k',
    statement: '_____ reads objects from an input stream for deserialization.',
    answer: 'ObjectInputStream',
    topicId: 'java_file_handling',
    hint: 'Used with readObject() method',
  ),
  FillBlankQuestion(
    id: 'jfb_029l',
    statement: 'The _____ method of BufferedReader reads a complete line of text from a file.',
    answer: 'readLine',
    topicId: 'java_file_handling',
    hint: 'Returns null at end of file',
  ),
  
  // JDBC questions
  FillBlankQuestion(
    id: 'jfb_031',
    statement: '_____ is an API that enables Java applications to interact with databases.',
    answer: 'JDBC',
    topicId: 'java_jdbc',
    hint: 'Java Database Connectivity',
  ),
  FillBlankQuestion(
    id: 'jfb_032',
    statement: '_____ prevents SQL injection attacks by using parameterized queries.',
    answer: 'PreparedStatement',
    topicId: 'java_jdbc',
    hint: 'More secure than regular Statement',
  ),
  FillBlankQuestion(
    id: 'jfb_031a',
    statement: 'JDBC classes are part of the _____ package.',
    answer: 'java.sql',
    topicId: 'java_jdbc',
    hint: 'SQL operations package',
  ),
  FillBlankQuestion(
    id: 'jfb_031b',
    statement: 'The _____ class manages database drivers in JDBC.',
    answer: 'DriverManager',
    topicId: 'java_jdbc',
    hint: 'Used with getConnection() method',
  ),
  FillBlankQuestion(
    id: 'jfb_031c',
    statement: 'The _____ interface represents a database connection session.',
    answer: 'Connection',
    topicId: 'java_jdbc',
    hint: 'Returned by DriverManager.getConnection()',
  ),
  FillBlankQuestion(
    id: 'jfb_031d',
    statement: 'The _____ method is used to execute SELECT queries and returns a ResultSet.',
    answer: 'executeQuery',
    topicId: 'java_jdbc',
    hint: 'Used for queries that return data',
  ),
  FillBlankQuestion(
    id: 'jfb_031e',
    statement: 'The _____ method is used for INSERT, UPDATE, and DELETE statements.',
    answer: 'executeUpdate',
    topicId: 'java_jdbc',
    hint: 'Returns the number of affected rows',
  ),
  FillBlankQuestion(
    id: 'jfb_031f',
    statement: '_____ holds the results of a SQL query in JDBC.',
    answer: 'ResultSet',
    topicId: 'java_jdbc',
    hint: 'Use next() to iterate through results',
  ),
  FillBlankQuestion(
    id: 'jfb_031g',
    statement: 'The _____ exception must be handled when performing JDBC operations.',
    answer: 'SQLException',
    topicId: 'java_jdbc',
    hint: 'Database-related exception',
  ),
  FillBlankQuestion(
    id: 'jfb_031h',
    statement: 'To start a transaction, call setAutoCommit(_____).',
    answer: 'false',
    topicId: 'java_jdbc',
    hint: 'Disables automatic commit',
  ),
  FillBlankQuestion(
    id: 'jfb_031i',
    statement: 'The _____ method saves all changes made during a transaction.',
    answer: 'commit',
    topicId: 'java_jdbc',
    hint: 'Makes changes permanent',
  ),
  FillBlankQuestion(
    id: 'jfb_031j',
    statement: 'The _____ method undoes all changes made during a failed transaction.',
    answer: 'rollback',
    topicId: 'java_jdbc',
    hint: 'Reverses transaction on error',
  ),
  FillBlankQuestion(
    id: 'jfb_031k',
    statement: 'In PreparedStatement, the _____ character is used as a parameter placeholder.',
    answer: '?',
    topicId: 'java_jdbc',
    hint: 'Question mark symbol',
  ),
  FillBlankQuestion(
    id: 'jfb_031l',
    statement: 'The default ResultSet type is TYPE_FORWARD______, which allows only forward navigation.',
    answer: 'ONLY',
    topicId: 'java_jdbc',
    hint: 'Cannot scroll backward',
  ),
  FillBlankQuestion(
    id: 'jfb_031m',
    statement: '_____ processing allows executing multiple SQL statements as a single batch.',
    answer: 'Batch',
    topicId: 'java_jdbc',
    hint: 'Use addBatch() and executeBatch()',
  ),
  
  // Memory Management questions
  FillBlankQuestion(
    id: 'jfb_033',
    statement: 'Objects in Java are stored in the _____ memory area.',
    answer: 'Heap',
    topicId: 'java_memory_gc',
    hint: 'Shared among all threads',
  ),
  FillBlankQuestion(
    id: 'jfb_034',
    statement: '_____ automatically reclaims memory occupied by objects that are no longer in use.',
    answer: 'Garbage Collection',
    topicId: 'java_memory_gc',
    hint: 'Automatic memory management in Java',
  ),
  FillBlankQuestion(
    id: 'jfb_033a',
    statement: 'The _____ stores method call frames and local variables in the JVM.',
    answer: 'Stack',
    topicId: 'java_memory_gc',
    hint: 'Thread-specific memory area',
  ),
  FillBlankQuestion(
    id: 'jfb_033b',
    statement: 'The Java heap is divided into _____ Generation and Old Generation.',
    answer: 'Young',
    topicId: 'java_memory_gc',
    hint: 'Where new objects are created',
  ),
  FillBlankQuestion(
    id: 'jfb_033c',
    statement: 'Newly created objects are initially stored in the _____ space.',
    answer: 'Eden',
    topicId: 'java_memory_gc',
    hint: 'Part of Young Generation',
  ),
  FillBlankQuestion(
    id: 'jfb_033d',
    statement: '_____ GC occurs in the Young Generation for short-lived objects.',
    answer: 'Minor',
    topicId: 'java_memory_gc',
    hint: 'Opposite of Major GC',
  ),
  FillBlankQuestion(
    id: 'jfb_033e',
    statement: '_____ GC occurs in the Old Generation for long-lived objects.',
    answer: 'Major',
    topicId: 'java_memory_gc',
    hint: 'Also called Full GC',
  ),
  FillBlankQuestion(
    id: 'jfb_033f',
    statement: 'System._____() is used to request garbage collection from the JVM.',
    answer: 'gc',
    topicId: 'java_memory_gc',
    hint: 'Only a request, not guaranteed',
  ),
  FillBlankQuestion(
    id: 'jfb_033g',
    statement: 'The _____() method is called before an object is garbage collected.',
    answer: 'finalize',
    topicId: 'java_memory_gc',
    hint: 'Deprecated in modern Java',
  ),
  FillBlankQuestion(
    id: 'jfb_033h',
    statement: '_____ references are never garbage collected while they exist.',
    answer: 'Strong',
    topicId: 'java_memory_gc',
    hint: 'Default reference type in Java',
  ),
  FillBlankQuestion(
    id: 'jfb_033i',
    statement: '_____ references are garbage collected only when memory is low.',
    answer: 'Soft',
    topicId: 'java_memory_gc',
    hint: 'Useful for memory-sensitive caches',
  ),
  FillBlankQuestion(
    id: 'jfb_033j',
    statement: '_____ references are garbage collected as soon as the object is weakly reachable.',
    answer: 'Weak',
    topicId: 'java_memory_gc',
    hint: 'Weaker than soft references',
  ),
  FillBlankQuestion(
    id: 'jfb_033k',
    statement: 'The three phases of garbage collection are Mark, _____, and Compact.',
    answer: 'Sweep',
    topicId: 'java_memory_gc',
    hint: 'Removes unreferenced objects',
  ),
  FillBlankQuestion(
    id: 'jfb_033l',
    statement: '_____ GC is a modern collector that splits heap into regions for large applications.',
    answer: 'G1',
    topicId: 'java_memory_gc',
    hint: 'Garbage-First collector',
  ),
  FillBlankQuestion(
    id: 'jfb_033m',
    statement: 'Memory _____ occur when references are unintentionally retained.',
    answer: 'leaks',
    topicId: 'java_memory_gc',
    hint: 'Common problem with static collections',
  ),
  FillBlankQuestion(
    id: 'jfb_033n',
    statement: 'The _____ Area stores class structures, bytecode, and static variables.',
    answer: 'Method',
    topicId: 'java_memory_gc',
    hint: 'Also called Metaspace in Java 8+',
  ),
  
  // Lambda Expressions questions
  FillBlankQuestion(
    id: 'jfb_035',
    statement: '_____ expressions provide a concise way to represent functional interfaces using an expression.',
    answer: 'Lambda',
    topicId: 'java_lambda',
    hint: 'Uses arrow notation (->)',
  ),
  FillBlankQuestion(
    id: 'jfb_036',
    statement: 'A _____ interface has exactly one abstract method.',
    answer: 'functional',
    topicId: 'java_lambda',
    hint: 'Marked with @FunctionalInterface annotation',
  ),
  FillBlankQuestion(
    id: 'jfb_035a',
    statement: 'Lambda expressions were introduced in Java _____.',
    answer: '8',
    topicId: 'java_lambda',
    hint: 'Major version that introduced functional programming features',
  ),
  FillBlankQuestion(
    id: 'jfb_035b',
    statement: 'The _____ annotation marks an interface as a functional interface.',
    answer: '@FunctionalInterface',
    topicId: 'java_lambda',
    hint: 'Optional but recommended annotation',
  ),
  FillBlankQuestion(
    id: 'jfb_035c',
    statement: 'The _____ functional interface tests conditions and returns a boolean.',
    answer: 'Predicate',
    topicId: 'java_lambda',
    hint: 'Has test() method',
  ),
  FillBlankQuestion(
    id: 'jfb_035d',
    statement: 'The _____ functional interface converts one type to another.',
    answer: 'Function',
    topicId: 'java_lambda',
    hint: 'Has apply() method',
  ),
  FillBlankQuestion(
    id: 'jfb_035e',
    statement: 'The _____ functional interface performs actions without returning a value.',
    answer: 'Consumer',
    topicId: 'java_lambda',
    hint: 'Has accept() method',
  ),
  FillBlankQuestion(
    id: 'jfb_035f',
    statement: 'The _____ functional interface supplies values without taking parameters.',
    answer: 'Supplier',
    topicId: 'java_lambda',
    hint: 'Has get() method',
  ),
  FillBlankQuestion(
    id: 'jfb_035g',
    statement: 'The _____ operator (::) provides shorthand for lambda expressions.',
    answer: 'method reference',
    topicId: 'java_lambda',
    hint: 'Cleaner syntax for calling methods',
  ),
  FillBlankQuestion(
    id: 'jfb_035h',
    statement: '_____ takes two parameters of the same type and returns the same type.',
    answer: 'BinaryOperator',
    topicId: 'java_lambda',
    hint: 'Example: (a, b) -> a + b',
  ),
  FillBlankQuestion(
    id: 'jfb_035i',
    statement: '_____ takes one parameter and returns the same type.',
    answer: 'UnaryOperator',
    topicId: 'java_lambda',
    hint: 'Example: n -> n * n',
  ),
  FillBlankQuestion(
    id: 'jfb_035j',
    statement: 'Lambda expressions integrate seamlessly with the _____ API.',
    answer: 'Streams',
    topicId: 'java_lambda',
    hint: 'Used for processing collections',
  ),
  FillBlankQuestion(
    id: 'jfb_035k',
    statement: 'The arrow symbol used in lambda syntax is _____.',
    answer: '->',
    topicId: 'java_lambda',
    hint: 'Separates parameters from body',
  ),
  FillBlankQuestion(
    id: 'jfb_035l',
    statement: 'Functional interfaces can have _____ and static methods in addition to one abstract method.',
    answer: 'default',
    topicId: 'java_lambda',
    hint: 'Provides default implementation',
  ),
  FillBlankQuestion(
    id: 'jfb_035m',
    statement: 'Lambda expressions reduce _____ code compared to anonymous classes.',
    answer: 'boilerplate',
    topicId: 'java_lambda',
    hint: 'Makes code more concise',
  ),
  
  // Annotations and Enums questions
  FillBlankQuestion(
    id: 'jfb_037',
    statement: 'The @_____ annotation indicates that a method overrides a superclass method.',
    answer: 'Override',
    topicId: 'java_annotations_enums',
    hint: 'Helps catch errors at compile time',
  ),
  FillBlankQuestion(
    id: 'jfb_038',
    statement: '_____ represent a fixed set of constants in Java.',
    answer: 'Enums',
    topicId: 'java_annotations_enums',
    hint: 'Type-safe alternative to integer constants',
  ),
  FillBlankQuestion(
    id: 'jfb_037a',
    statement: 'Annotations are _____ that provide information about code.',
    answer: 'metadata',
    topicId: 'java_annotations_enums',
    hint: 'Data about data',
  ),
  FillBlankQuestion(
    id: 'jfb_037b',
    statement: 'Annotations are declared with the _____ symbol.',
    answer: '@',
    topicId: 'java_annotations_enums',
    hint: 'At symbol',
  ),
  FillBlankQuestion(
    id: 'jfb_037c',
    statement: 'The @_____ annotation marks a method or class as obsolete.',
    answer: 'Deprecated',
    topicId: 'java_annotations_enums',
    hint: 'Indicates code should not be used',
  ),
  FillBlankQuestion(
    id: 'jfb_037d',
    statement: 'The @_____ annotation suppresses compiler warnings.',
    answer: 'SuppressWarnings',
    topicId: 'java_annotations_enums',
    hint: 'Hides specific compiler warnings',
  ),
  FillBlankQuestion(
    id: 'jfb_037e',
    statement: 'Custom annotations are defined using the @_____ keyword.',
    answer: 'interface',
    topicId: 'java_annotations_enums',
    hint: 'Similar to interface declaration',
  ),
  FillBlankQuestion(
    id: 'jfb_037f',
    statement: 'The @_____ annotation specifies the lifetime of an annotation.',
    answer: 'Retention',
    topicId: 'java_annotations_enums',
    hint: 'Can be SOURCE, CLASS, or RUNTIME',
  ),
  FillBlankQuestion(
    id: 'jfb_037g',
    statement: 'The @_____ annotation specifies where an annotation can be applied.',
    answer: 'Target',
    topicId: 'java_annotations_enums',
    hint: 'Defines applicable elements',
  ),
  FillBlankQuestion(
    id: 'jfb_037h',
    statement: 'Annotations and enums were both introduced in Java _____.',
    answer: '5',
    topicId: 'java_annotations_enums',
    hint: 'Major version release',
  ),
  FillBlankQuestion(
    id: 'jfb_037i',
    statement: 'The _____ retention policy makes annotations available at runtime.',
    answer: 'RUNTIME',
    topicId: 'java_annotations_enums',
    hint: 'Accessible via reflection',
  ),
  FillBlankQuestion(
    id: 'jfb_037j',
    statement: 'Enums can have constructors, but they must be _____.',
    answer: 'private',
    topicId: 'java_annotations_enums',
    hint: 'Cannot be called externally',
  ),
  FillBlankQuestion(
    id: 'jfb_037k',
    statement: 'The _____() method returns all enum constants as an array.',
    answer: 'values',
    topicId: 'java_annotations_enums',
    hint: 'Built-in method for all enums',
  ),
  FillBlankQuestion(
    id: 'jfb_037l',
    statement: 'Enums can implement _____ but cannot extend other classes.',
    answer: 'interfaces',
    topicId: 'java_annotations_enums',
    hint: 'Multiple inheritance restriction',
  ),
  FillBlankQuestion(
    id: 'jfb_037m',
    statement: 'Enums provide type _____ over integer constants.',
    answer: 'safety',
    topicId: 'java_annotations_enums',
    hint: 'Compile-time checking',
  ),
  FillBlankQuestion(
    id: 'jfb_037n',
    statement: 'The ordinal() method returns the _____ of an enum constant.',
    answer: 'position',
    topicId: 'java_annotations_enums',
    hint: 'Zero-based index',
  ),
  
  // Design Patterns questions
  FillBlankQuestion(
    id: 'jfb_039',
    statement: 'The _____ pattern ensures a class has only one instance.',
    answer: 'Singleton',
    topicId: 'java_design_patterns',
    hint: 'Uses private constructor and static instance',
  ),
  FillBlankQuestion(
    id: 'jfb_040',
    statement: 'The _____ pattern creates objects without specifying the exact class to create.',
    answer: 'Factory',
    topicId: 'java_design_patterns',
    hint: 'Creational design pattern',
  ),
  FillBlankQuestion(
    id: 'jfb_039a',
    statement: 'Design patterns are divided into three categories: Creational, Structural, and _____.',
    answer: 'Behavioral',
    topicId: 'java_design_patterns',
    hint: 'Object interaction patterns',
  ),
  FillBlankQuestion(
    id: 'jfb_039b',
    statement: '_____ patterns deal with object creation mechanisms.',
    answer: 'Creational',
    topicId: 'java_design_patterns',
    hint: 'Singleton, Factory, Builder',
  ),
  FillBlankQuestion(
    id: 'jfb_039c',
    statement: '_____ patterns deal with object composition and structure.',
    answer: 'Structural',
    topicId: 'java_design_patterns',
    hint: 'Adapter, Decorator, Bridge',
  ),
  FillBlankQuestion(
    id: 'jfb_039d',
    statement: 'The Singleton pattern uses a _____ constructor to prevent external instantiation.',
    answer: 'private',
    topicId: 'java_design_patterns',
    hint: 'Restricts access',
  ),
  FillBlankQuestion(
    id: 'jfb_039e',
    statement: 'The _____ pattern allows incompatible interfaces to work together.',
    answer: 'Adapter',
    topicId: 'java_design_patterns',
    hint: 'Structural pattern for compatibility',
  ),
  FillBlankQuestion(
    id: 'jfb_039f',
    statement: 'The _____ pattern adds behavior to objects dynamically without modifying their class.',
    answer: 'Decorator',
    topicId: 'java_design_patterns',
    hint: 'Wraps objects to add functionality',
  ),
  FillBlankQuestion(
    id: 'jfb_039g',
    statement: 'The _____ pattern implements a one-to-many dependency between objects.',
    answer: 'Observer',
    topicId: 'java_design_patterns',
    hint: 'Used in event handling',
  ),
  FillBlankQuestion(
    id: 'jfb_039h',
    statement: 'The _____ pattern defines a family of interchangeable algorithms.',
    answer: 'Strategy',
    topicId: 'java_design_patterns',
    hint: 'Behavioral pattern for algorithm selection',
  ),
  FillBlankQuestion(
    id: 'jfb_039i',
    statement: 'The _____ Singleton is the best thread-safe approach using a static inner class.',
    answer: 'Bill Pugh',
    topicId: 'java_design_patterns',
    hint: 'Named after its creator',
  ),
  FillBlankQuestion(
    id: 'jfb_039j',
    statement: 'The _____ pattern constructs complex objects step by step.',
    answer: 'Builder',
    topicId: 'java_design_patterns',
    hint: 'Creational pattern with fluent API',
  ),
  FillBlankQuestion(
    id: 'jfb_039k',
    statement: 'Design patterns provide _____ solutions to common software design problems.',
    answer: 'reusable',
    topicId: 'java_design_patterns',
    hint: 'Can be applied repeatedly',
  ),
  FillBlankQuestion(
    id: 'jfb_039l',
    statement: 'The Factory pattern promotes _____ coupling between classes.',
    answer: 'loose',
    topicId: 'java_design_patterns',
    hint: 'Reduces dependencies',
  ),
  FillBlankQuestion(
    id: 'jfb_039m',
    statement: 'In the Observer pattern, the _____ notifies all observers when its state changes.',
    answer: 'Subject',
    topicId: 'java_design_patterns',
    hint: 'The object being observed',
  ),
  FillBlankQuestion(
    id: 'jfb_039n',
    statement: 'The Strategy pattern enables _____ selection of algorithms.',
    answer: 'runtime',
    topicId: 'java_design_patterns',
    hint: 'Dynamic choice during execution',
  ),
  
  // Java 8+ Features questions
  FillBlankQuestion(
    id: 'jfb_041',
    statement: 'The _____ class in Java 8 helps avoid NullPointerException.',
    answer: 'Optional',
    topicId: 'java8_features',
    hint: 'Container object that may or may not contain a value',
  ),
  FillBlankQuestion(
    id: 'jfb_042',
    statement: 'Java 8 introduced the new _____ API for working with dates and times.',
    answer: 'DateTime',
    topicId: 'java8_features',
    hint: 'Replaces old Date and Calendar classes',
  ),
  FillBlankQuestion(
    id: 'jfb_041a',
    statement: 'The _____ API provides functional-style operations on collections.',
    answer: 'Streams',
    topicId: 'java8_features',
    hint: 'Allows filter, map, reduce operations',
  ),
  FillBlankQuestion(
    id: 'jfb_041b',
    statement: 'Streams are _____ and non-modifying.',
    answer: 'lazy',
    topicId: 'java8_features',
    hint: 'Operations are deferred until needed',
  ),
  FillBlankQuestion(
    id: 'jfb_041c',
    statement: '_____ operations in streams include filter, map, and sorted.',
    answer: 'Intermediate',
    topicId: 'java8_features',
    hint: 'Operations that return a stream',
  ),
  FillBlankQuestion(
    id: 'jfb_041d',
    statement: '_____ operations in streams include collect, forEach, and reduce.',
    answer: 'Terminal',
    topicId: 'java8_features',
    hint: 'Operations that produce a result',
  ),
  FillBlankQuestion(
    id: 'jfb_041e',
    statement: '_____ streams enable multi-threaded processing of data.',
    answer: 'Parallel',
    topicId: 'java8_features',
    hint: 'Uses multiple threads for performance',
  ),
  FillBlankQuestion(
    id: 'jfb_041f',
    statement: 'The isPresent() method in Optional checks if a _____ exists.',
    answer: 'value',
    topicId: 'java8_features',
    hint: 'Returns boolean',
  ),
  FillBlankQuestion(
    id: 'jfb_041g',
    statement: 'The orElse() method in Optional provides a _____ value if empty.',
    answer: 'default',
    topicId: 'java8_features',
    hint: 'Fallback value',
  ),
  FillBlankQuestion(
    id: 'jfb_041h',
    statement: '_____ represents a date without time in java.time package.',
    answer: 'LocalDate',
    topicId: 'java8_features',
    hint: 'Year, month, day only',
  ),
  FillBlankQuestion(
    id: 'jfb_041i',
    statement: '_____ represents a time without date in java.time package.',
    answer: 'LocalTime',
    topicId: 'java8_features',
    hint: 'Hour, minute, second only',
  ),
  FillBlankQuestion(
    id: 'jfb_041j',
    statement: '_____ combines date and time in java.time package.',
    answer: 'LocalDateTime',
    topicId: 'java8_features',
    hint: 'Both date and time together',
  ),
  FillBlankQuestion(
    id: 'jfb_041k',
    statement: 'The DateTime API is _____ and thread-safe.',
    answer: 'immutable',
    topicId: 'java8_features',
    hint: 'Cannot be modified after creation',
  ),
  FillBlankQuestion(
    id: 'jfb_041l',
    statement: '_____ is used for formatting and parsing dates in java.time.',
    answer: 'DateTimeFormatter',
    topicId: 'java8_features',
    hint: 'Replaces SimpleDateFormat',
  ),
  FillBlankQuestion(
    id: 'jfb_041m',
    statement: '_____ measures date-based duration like years, months, and days.',
    answer: 'Period',
    topicId: 'java8_features',
    hint: 'Between two LocalDate objects',
  ),
  FillBlankQuestion(
    id: 'jfb_041n',
    statement: '_____ measures time-based duration like hours, minutes, and seconds.',
    answer: 'Duration',
    topicId: 'java8_features',
    hint: 'Between two LocalTime or LocalDateTime objects',
  ),
  
  // Modules and Packages questions
  FillBlankQuestion(
    id: 'jfb_043',
    statement: 'The _____ keyword makes module contents accessible to other modules.',
    answer: 'exports',
    topicId: 'java_modules_packages',
    hint: 'Used in module-info.java',
  ),
  FillBlankQuestion(
    id: 'jfb_044',
    statement: '_____ organize classes and prevent naming conflicts in Java.',
    answer: 'Packages',
    topicId: 'java_modules_packages',
    hint: 'Declared with package keyword',
  ),
  
  // JavaFX questions
  FillBlankQuestion(
    id: 'jfb_045',
    statement: '_____ is a modern framework for building rich desktop applications in Java.',
    answer: 'JavaFX',
    topicId: 'java_javafx_gui',
    hint: 'Replaced Swing as the standard GUI toolkit',
  ),
  FillBlankQuestion(
    id: 'jfb_046',
    statement: 'In JavaFX, a _____ is the container for all UI elements.',
    answer: 'Scene',
    topicId: 'java_javafx_gui',
    hint: 'Added to a Stage for display',
  ),
  
  // Networking questions
  FillBlankQuestion(
    id: 'jfb_047',
    statement: '_____ class is used for TCP server communication in Java.',
    answer: 'ServerSocket',
    topicId: 'java_networking',
    hint: 'Listens for client connections',
  ),
  FillBlankQuestion(
    id: 'jfb_048',
    statement: '_____ provides UDP communication in Java.',
    answer: 'DatagramSocket',
    topicId: 'java_networking',
    hint: 'Connectionless protocol',
  ),
  
  // Serialization questions
  FillBlankQuestion(
    id: 'jfb_049',
    statement: 'Classes must implement the _____ interface to be serialized.',
    answer: 'Serializable',
    topicId: 'java_serialization',
    hint: 'Marker interface with no methods',
  ),
  FillBlankQuestion(
    id: 'jfb_050',
    statement: 'The _____ keyword prevents a field from being serialized.',
    answer: 'transient',
    topicId: 'java_serialization',
    hint: 'Used for sensitive or temporary data',
  ),
  
  // JVM Performance questions
  FillBlankQuestion(
    id: 'jfb_051',
    statement: 'The _____ compiler improves performance by compiling bytecode to native code.',
    answer: 'JIT',
    topicId: 'java_jvm_performance',
    hint: 'Just-In-Time compiler',
  ),
  FillBlankQuestion(
    id: 'jfb_052',
    statement: '-Xmx sets the maximum _____ size for the JVM.',
    answer: 'heap',
    topicId: 'java_jvm_performance',
    hint: 'Memory area where objects are stored',
  ),
  
  // Security questions
  FillBlankQuestion(
    id: 'jfb_053',
    statement: 'The _____ access modifier makes a member accessible only within its class.',
    answer: 'private',
    topicId: 'java_security',
    hint: 'Most restrictive access level',
  ),
  FillBlankQuestion(
    id: 'jfb_054',
    statement: 'The _____ access modifier allows access in the same package and subclasses.',
    answer: 'protected',
    topicId: 'java_security',
    hint: 'Between private and public',
  ),
  
  // Unit Testing questions
  FillBlankQuestion(
    id: 'jfb_055',
    statement: 'The @_____ annotation marks a method as a JUnit test.',
    answer: 'Test',
    topicId: 'java_unit_testing',
    hint: 'From org.junit.jupiter.api',
  ),
  FillBlankQuestion(
    id: 'jfb_056',
    statement: '_____ is a mocking framework used to create mock objects for unit testing.',
    answer: 'Mockito',
    topicId: 'java_unit_testing',
    hint: 'Popular testing framework for Java',
  ),
  
  // Build Tools questions
  FillBlankQuestion(
    id: 'jfb_057',
    statement: 'Maven uses _____ for project configuration.',
    answer: 'pom.xml',
    topicId: 'java_build_tools',
    hint: 'Project Object Model file',
  ),
  FillBlankQuestion(
    id: 'jfb_058',
    statement: '_____ uses build.gradle for configuration with Groovy or Kotlin DSL.',
    answer: 'Gradle',
    topicId: 'java_build_tools',
    hint: 'Modern build automation tool',
  ),
  
  // Spring Boot questions
  FillBlankQuestion(
    id: 'jfb_059',
    statement: 'The @_____ annotation marks a Spring Boot application class.',
    answer: 'SpringBootApplication',
    topicId: 'java_spring_boot',
    hint: 'Enables auto-configuration',
  ),
  FillBlankQuestion(
    id: 'jfb_060',
    statement: '@_____ annotation is used to create RESTful web services in Spring Boot.',
    answer: 'RestController',
    topicId: 'java_spring_boot',
    hint: 'Combines @Controller and @ResponseBody',
  ),
  
  // Best Practices questions
  FillBlankQuestion(
    id: 'jfb_061',
    statement: '_____ is better than String concatenation with + for multiple string operations.',
    answer: 'StringBuilder',
    topicId: 'java_best_practices',
    hint: 'Mutable sequence of characters',
  ),
  FillBlankQuestion(
    id: 'jfb_062',
    statement: 'Constants in Java should be named in _____ case.',
    answer: 'UPPER',
    topicId: 'java_best_practices',
    hint: 'Like MAX_SIZE or PI',
  ),
];

// DBMS Fill-in-the-Blanks Questions
final List<FillBlankQuestion> dbmsFillBlankQuestions = [
  // Introduction to DBMS questions
  FillBlankQuestion(
    id: 'dfb_001',
    statement: 'A _____ is a collection of data organized in a manner that allows access, retrieval, and use of that data.',
    answer: 'database',
    topicId: 'dbms_intro',
    hint: 'The organized collection of data that a DBMS manages',
  ),
  FillBlankQuestion(
    id: 'dfb_002',
    statement: 'DBMS stands for _____.',
    answer: 'Database Management System',
    topicId: 'dbms_intro',
    hint: 'The full form of the acronym DBMS',
  ),
  FillBlankQuestion(
    id: 'dfb_003',
    statement: 'The _____ model represents data as tables with rows and columns.',
    answer: 'relational',
    topicId: 'dbms_intro',
    hint: 'The most common data model used in modern databases',
  ),
  FillBlankQuestion(
    id: 'dfb_010',
    statement: 'The person responsible for managing and maintaining a database is called a database _____.',
    answer: 'administrator',
    topicId: 'dbms_intro',
    hint: 'Often abbreviated as DBA',
  ),
  FillBlankQuestion(
    id: 'dfb_011',
    statement: 'A _____ is a field or combination of fields that uniquely identifies a record in a table.',
    answer: 'primary key',
    topicId: 'dbms_intro',
    hint: 'Essential for table relationships and data integrity',
  ),
  
  // SQL Basics questions
  FillBlankQuestion(
    id: 'dfb_004',
    statement: 'SQL stands for _____.',
    answer: 'Structured Query Language',
    topicId: 'sql_basics',
    hint: 'The language used to communicate with databases',
  ),
  FillBlankQuestion(
    id: 'dfb_005',
    statement: 'The _____ statement is used to retrieve data from a database.',
    answer: 'SELECT',
    topicId: 'sql_basics',
    hint: 'You use this to query or fetch data',
  ),
  FillBlankQuestion(
    id: 'dfb_006',
    statement: 'The _____ clause is used to filter records based on a specified condition.',
    answer: 'WHERE',
    topicId: 'sql_basics',
    hint: 'Used to specify criteria for the records you want',
  ),
  FillBlankQuestion(
    id: 'dfb_012',
    statement: 'The _____ statement is used to add new records to a table.',
    answer: 'INSERT',
    topicId: 'sql_basics',
    hint: 'Used to add new data to a table',
  ),
  FillBlankQuestion(
    id: 'dfb_013',
    statement: 'The _____ statement is used to modify existing records in a table.',
    answer: 'UPDATE',
    topicId: 'sql_basics',
    hint: 'Used to change existing data',
  ),
  FillBlankQuestion(
    id: 'dfb_014',
    statement: 'The _____ keyword is used to combine rows from two or more tables based on a related column.',
    answer: 'JOIN',
    topicId: 'sql_basics',
    hint: 'Used to connect tables together in a query',
  ),
  FillBlankQuestion(
    id: 'dfb_015',
    statement: 'The _____ clause is used to group rows that have the same values.',
    answer: 'GROUP BY',
    topicId: 'sql_basics',
    hint: 'Often used with aggregate functions like COUNT, MAX, MIN, etc.',
  ),
  
  // Normalization questions
  FillBlankQuestion(
    id: 'dfb_007',
    statement: '_____ is the process of organizing data to reduce redundancy and improve data integrity.',
    answer: 'Normalization',
    topicId: 'normalization',
    hint: 'The process of structuring a database to minimize redundancy',
  ),
  FillBlankQuestion(
    id: 'dfb_008',
    statement: 'In database design, _____ Normal Form requires that each non-key attribute is fully functionally dependent on the primary key.',
    answer: 'Second',
    topicId: 'normalization',
    hint: '1NF, _NF, 3NF...',
  ),
  FillBlankQuestion(
    id: 'dfb_009',
    statement: 'A table is in _____ Normal Form if it is in 2NF and has no transitive dependencies.',
    answer: 'Third',
    topicId: 'normalization',
    hint: 'Comes after Second Normal Form',
  ),
  FillBlankQuestion(
    id: 'dfb_016',
    statement: 'A _____ dependency occurs when a non-key attribute depends on another non-key attribute.',
    answer: 'transitive',
    topicId: 'normalization',
    hint: 'A key concept in Third Normal Form',
  ),
  FillBlankQuestion(
    id: 'dfb_017',
    statement: '_____ Normal Form requires that a table is in 1NF and has no repeating groups.',
    answer: 'First',
    topicId: 'normalization',
    hint: 'The most basic level of normalization',
  ),
  FillBlankQuestion(
    id: 'dfb_017a',
    statement: 'In the Online Bookstore example, the table BookOrders with "The Alchemist, Harry Potter" in one cell violates _____ Normal Form.',
    answer: 'First',
    topicId: 'normalization',
    hint: 'This form requires atomic values in each cell',
  ),
  FillBlankQuestion(
    id: 'dfb_017b',
    statement: '_____ Normal Form eliminates multi-valued dependencies by splitting independent multi-valued facts into separate tables.',
    answer: 'Fourth',
    topicId: 'normalization',
    hint: 'Comes after BCNF',
  ),
  FillBlankQuestion(
    id: 'dfb_017c',
    statement: 'The _____ Normal Form deals with eliminating join dependencies.',
    answer: 'Fifth',
    topicId: 'normalization',
    hint: 'The highest level of normalization commonly discussed',
  ),
  FillBlankQuestion(
    id: 'dfb_017d',
    statement: 'In BCNF, every _____ must be a candidate key.',
    answer: 'determinant',
    topicId: 'normalization',
    hint: 'The attribute that determines another attribute',
  ),
  FillBlankQuestion(
    id: 'dfb_017e',
    statement: 'When an author can write multiple books AND have multiple awards independently, this is an example of _____ dependency.',
    answer: 'multi-valued',
    topicId: 'normalization',
    hint: 'Addressed by 4NF',
  ),
  FillBlankQuestion(
    id: 'dfb_017f',
    statement: 'In 2NF, we eliminate _____ dependencies where non-key attributes depend on only part of the composite primary key.',
    answer: 'partial',
    topicId: 'normalization',
    hint: 'Not full dependency, but _____ dependency',
  ),
  FillBlankQuestion(
    id: 'dfb_017g',
    statement: 'The main benefit of normalization is to reduce data _____ and improve data integrity.',
    answer: 'redundancy',
    topicId: 'normalization',
    hint: 'Duplicate or unnecessary data',
  ),
  
  // Transaction questions
  FillBlankQuestion(
    id: 'dfb_018',
    statement: 'The _____ property of a transaction ensures that either all operations complete successfully or none of them have any effect.',
    answer: 'Atomicity',
    topicId: 'transactions',
    hint: 'All or nothing principle',
  ),
  FillBlankQuestion(
    id: 'dfb_018a',
    statement: 'The _____ property ensures that once a transaction is committed, its effects are permanent even in case of system failure.',
    answer: 'Durability',
    topicId: 'transactions',
    hint: 'Survives crashes and power failures',
  ),
  FillBlankQuestion(
    id: 'dfb_018b',
    statement: 'The _____ statement is used to permanently save changes made in a transaction.',
    answer: 'COMMIT',
    topicId: 'transactions',
    hint: 'Finalizes transaction',
  ),
  FillBlankQuestion(
    id: 'dfb_018c',
    statement: 'The _____ statement is used to restore the database to its original state since the last commit.',
    answer: 'ROLLBACK',
    topicId: 'transactions',
    hint: 'Undoes transaction changes',
  ),
  FillBlankQuestion(
    id: 'dfb_018d',
    statement: 'A _____ is a named point within a transaction to which you can later roll back without aborting the entire transaction.',
    answer: 'SAVEPOINT',
    topicId: 'transactions',
    hint: 'Allows partial rollback',
  ),
  FillBlankQuestion(
    id: 'dfb_018e',
    statement: 'The _____ property ensures that transactions do not affect each other\'s intermediate states during concurrent execution.',
    answer: 'Isolation',
    topicId: 'transactions',
    hint: 'Transactions work independently',
  ),
  FillBlankQuestion(
    id: 'dfb_018f',
    statement: 'The _____ property ensures that the database remains in a valid state before and after a transaction.',
    answer: 'Consistency',
    topicId: 'transactions',
    hint: 'Maintains data integrity',
  ),
  FillBlankQuestion(
    id: 'dfb_018g',
    statement: 'A _____ read occurs when a transaction reads uncommitted data from another transaction that may later be rolled back.',
    answer: 'dirty',
    topicId: 'transactions',
    hint: 'Reading unclean data',
  ),
  FillBlankQuestion(
    id: 'dfb_018h',
    statement: 'The _____ isolation level prevents dirty reads but allows non-repeatable reads and phantom reads.',
    answer: 'READ COMMITTED',
    topicId: 'transactions',
    hint: 'Second isolation level',
  ),
  FillBlankQuestion(
    id: 'dfb_018i',
    statement: 'The _____ isolation level provides the highest consistency but lowest performance by executing transactions sequentially.',
    answer: 'SERIALIZABLE',
    topicId: 'transactions',
    hint: 'Highest isolation level',
  ),
  FillBlankQuestion(
    id: 'dfb_018j',
    statement: 'A _____ read occurs when the same query returns different results within the same transaction due to concurrent modifications.',
    answer: 'non-repeatable',
    topicId: 'transactions',
    hint: 'Results change during transaction',
  ),
  FillBlankQuestion(
    id: 'dfb_018k',
    statement: 'A _____ read occurs when new rows appear in subsequent reads within the same transaction.',
    answer: 'phantom',
    topicId: 'transactions',
    hint: 'Ghost rows appearing',
  ),
  FillBlankQuestion(
    id: 'dfb_018l',
    statement: 'In _____ mode, each SQL statement is automatically treated as a separate transaction and committed immediately.',
    answer: 'autocommit',
    topicId: 'transactions',
    hint: 'Automatic commit after each statement',
  ),
  FillBlankQuestion(
    id: 'dfb_018m',
    statement: 'A _____ occurs when two or more transactions wait indefinitely for each other to release locks.',
    answer: 'deadlock',
    topicId: 'transactions',
    hint: 'Circular waiting problem',
  ),
  FillBlankQuestion(
    id: 'dfb_018n',
    statement: 'The _____ protocol ensures that all nodes in a distributed database either commit or rollback a transaction together.',
    answer: 'two-phase commit',
    topicId: 'transactions',
    hint: 'Distributed transaction coordination',
  ),
  FillBlankQuestion(
    id: 'dfb_018o',
    statement: '_____ is a concurrency control technique that allows readers and writers to work without blocking each other by maintaining multiple versions of data.',
    answer: 'MVCC',
    topicId: 'transactions',
    hint: 'Multi-Version Concurrency Control',
  ),
  
  // Indexing questions
  FillBlankQuestion(
    id: 'dfb_023',
    statement: 'A database _____ is a data structure that improves the speed of data retrieval operations.',
    answer: 'index',
    topicId: 'indexing',
    hint: 'Acts like a table of contents',
  ),
  FillBlankQuestion(
    id: 'dfb_023a',
    statement: 'The most common type of index in relational databases is the _____ index.',
    answer: 'B-tree',
    topicId: 'indexing',
    hint: 'Balanced tree structure',
  ),
  FillBlankQuestion(
    id: 'dfb_023b',
    statement: 'A _____ index is created on two or more columns of a table.',
    answer: 'composite',
    topicId: 'indexing',
    hint: 'Also called multicolumn index',
  ),
  FillBlankQuestion(
    id: 'dfb_023c',
    statement: 'A _____ index determines the physical storage order of data in a table.',
    answer: 'clustered',
    topicId: 'indexing',
    hint: 'Only one per table',
  ),
  FillBlankQuestion(
    id: 'dfb_023d',
    statement: 'A _____ index creates a separate structure with pointers to table data.',
    answer: 'non-clustered',
    topicId: 'indexing',
    hint: 'Multiple allowed per table',
  ),
  FillBlankQuestion(
    id: 'dfb_023e',
    statement: 'A _____ index uses hash functions for exact match searches with O(1) complexity.',
    answer: 'hash',
    topicId: 'indexing',
    hint: 'Fast for equality but not ranges',
  ),
  FillBlankQuestion(
    id: 'dfb_023f',
    statement: 'A _____ index uses bit arrays and is ideal for low-cardinality columns.',
    answer: 'bitmap',
    topicId: 'indexing',
    hint: 'Uses bits 0 and 1',
  ),
  FillBlankQuestion(
    id: 'dfb_023g',
    statement: 'A _____ index is optimized for searching keywords in large text columns.',
    answer: 'full-text',
    topicId: 'indexing',
    hint: 'For document search',
  ),
  FillBlankQuestion(
    id: 'dfb_023h',
    statement: 'Indexes speed up SELECT operations but slow down _____, UPDATE, and DELETE operations.',
    answer: 'INSERT',
    topicId: 'indexing',
    hint: 'Data modification operation',
  ),
  FillBlankQuestion(
    id: 'dfb_023i',
    statement: 'Index _____ is the ratio of unique values to total rows, indicating how selective an index is.',
    answer: 'selectivity',
    topicId: 'indexing',
    hint: 'Higher means better index',
  ),
  FillBlankQuestion(
    id: 'dfb_023j',
    statement: 'A _____ index contains all columns needed by a query, avoiding table access.',
    answer: 'covering',
    topicId: 'indexing',
    hint: 'Index-only scan',
  ),
  FillBlankQuestion(
    id: 'dfb_023k',
    statement: 'The SQL command _____ is used to analyze whether a query uses an index efficiently.',
    answer: 'EXPLAIN',
    topicId: 'indexing',
    hint: 'Shows query execution plan',
  ),
  FillBlankQuestion(
    id: 'dfb_023l',
    statement: 'Using functions on indexed columns like YEAR(date) prevents _____ usage.',
    answer: 'index',
    topicId: 'indexing',
    hint: 'Query optimization issue',
  ),
  FillBlankQuestion(
    id: 'dfb_023m',
    statement: 'A composite index on (A, B, C) can efficiently filter queries on A, A and B, or _____ together.',
    answer: 'A and B and C',
    topicId: 'indexing',
    hint: 'All three columns',
  ),
  FillBlankQuestion(
    id: 'dfb_023n',
    statement: 'The _____ command is used to remove index fragmentation and update statistics.',
    answer: 'REINDEX',
    topicId: 'indexing',
    hint: 'Index maintenance',
  ),
  FillBlankQuestion(
    id: 'dfb_023o',
    statement: 'Low-_____ columns with few unique values like boolean flags are poor candidates for indexing.',
    answer: 'cardinality',
    topicId: 'indexing',
    hint: 'Number of unique values',
  ),
  
  // Database Design & Modeling
  FillBlankQuestion(
    id: 'dfb_024',
    statement: 'Database design is the process of producing a detailed _____ model of a database.',
    answer: 'data',
    topicId: 'db_design',
    hint: 'What type of model?',
  ),
  FillBlankQuestion(
    id: 'dfb_024a',
    statement: 'The _____ phase of database design involves creating Entity-Relationship diagrams independent of any DBMS.',
    answer: 'Conceptual',
    topicId: 'db_design',
    hint: 'Comes after requirement analysis',
  ),
  FillBlankQuestion(
    id: 'dfb_024b',
    statement: 'In ER modeling, an _____ is an object or concept with independent existence.',
    answer: 'entity',
    topicId: 'db_design',
    hint: 'Basic building block of ER diagrams',
  ),
  FillBlankQuestion(
    id: 'dfb_024c',
    statement: '_____ are properties that describe entities in an ER model.',
    answer: 'Attributes',
    topicId: 'db_design',
    hint: 'Characteristics or properties',
  ),
  FillBlankQuestion(
    id: 'dfb_024d',
    statement: 'A _____ key uniquely identifies each record in a table and cannot be NULL.',
    answer: 'primary',
    topicId: 'db_design',
    hint: 'Most important key in a table',
  ),
  FillBlankQuestion(
    id: 'dfb_024e',
    statement: '_____ defines the number of entity occurrences in a relationship, such as 1:1, 1:N, or M:N.',
    answer: 'Cardinality',
    topicId: 'db_design',
    hint: 'Describes relationship multiplicity',
  ),
  FillBlankQuestion(
    id: 'dfb_024f',
    statement: 'A Many-to-Many relationship is implemented using a _____ table also called a bridge table.',
    answer: 'junction',
    topicId: 'db_design',
    hint: 'Table that connects two entities in M:N relationship',
  ),
  FillBlankQuestion(
    id: 'dfb_024g',
    statement: 'A _____ key maintains referential integrity between tables by referencing the primary key of another table.',
    answer: 'foreign',
    topicId: 'db_design',
    hint: 'Links tables together',
  ),
  FillBlankQuestion(
    id: 'dfb_024h',
    statement: 'The logical design phase converts the conceptual model to a _____ schema with tables, primary keys, and foreign keys.',
    answer: 'relational',
    topicId: 'db_design',
    hint: 'Type of database model',
  ),
  FillBlankQuestion(
    id: 'dfb_024i',
    statement: 'A _____ entity depends on another entity for existence and does not have its own primary key.',
    answer: 'weak',
    topicId: 'db_design',
    hint: 'Opposite of strong entity',
  ),
  FillBlankQuestion(
    id: 'dfb_024j',
    statement: '_____ Normal Form requires that each non-key attribute is fully functionally dependent on the entire primary key.',
    answer: 'Second',
    topicId: 'db_design',
    hint: 'Eliminates partial dependencies',
  ),
  FillBlankQuestion(
    id: 'dfb_024k',
    statement: 'Third Normal Form eliminates _____ dependencies where non-key attributes depend on other non-key attributes.',
    answer: 'transitive',
    topicId: 'db_design',
    hint: 'Indirect dependency through another attribute',
  ),
  FillBlankQuestion(
    id: 'dfb_024l',
    statement: 'A _____ key is a primary key made up of multiple columns.',
    answer: 'composite',
    topicId: 'db_design',
    hint: 'Multiple columns together',
  ),
  FillBlankQuestion(
    id: 'dfb_024m',
    statement: 'The _____ design phase implements the database on a specific DBMS with optimization strategies like indexing and partitioning.',
    answer: 'Physical',
    topicId: 'db_design',
    hint: 'Final phase of database design',
  ),
  FillBlankQuestion(
    id: 'dfb_024n',
    statement: 'ON DELETE _____ automatically deletes related child records when the parent record is deleted.',
    answer: 'CASCADE',
    topicId: 'db_design',
    hint: 'Referential action for foreign keys',
  ),
  FillBlankQuestion(
    id: 'dfb_024o',
    statement: 'In ER diagrams, a _____ relationship connects an entity to itself, such as Employee manages Employee.',
    answer: 'recursive',
    topicId: 'db_design',
    hint: 'Also called unary relationship',
  ),
  
  // Advanced SQL & Query Optimization
  FillBlankQuestion(
    id: 'dfb_025',
    statement: '_____ JOIN returns all rows from the left table and matching rows from the right table.',
    answer: 'LEFT',
    topicId: 'advanced_sql',
    hint: 'Also called LEFT OUTER JOIN',
  ),
  FillBlankQuestion(
    id: 'dfb_025a',
    statement: 'A _____ subquery references the outer query and executes once per outer row.',
    answer: 'correlated',
    topicId: 'advanced_sql',
    hint: 'Opposite of non-correlated',
  ),
  FillBlankQuestion(
    id: 'dfb_025b',
    statement: '_____ OVER is a window function used to calculate cumulative sums or running totals.',
    answer: 'SUM',
    topicId: 'advanced_sql',
    hint: 'Aggregate function used with OVER clause',
  ),
  FillBlankQuestion(
    id: 'dfb_025c',
    statement: 'The _____ window function accesses the previous row value in a result set.',
    answer: 'LAG',
    topicId: 'advanced_sql',
    hint: 'Opposite of LEAD',
  ),
  FillBlankQuestion(
    id: 'dfb_025d',
    statement: 'RANK() creates _____ for ties, while DENSE_RANK() does not.',
    answer: 'gaps',
    topicId: 'advanced_sql',
    hint: 'What appears in ranking when there are tied values',
  ),
  FillBlankQuestion(
    id: 'dfb_025e',
    statement: '_____ combines two query results and removes duplicates, while UNION ALL keeps duplicates.',
    answer: 'UNION',
    topicId: 'advanced_sql',
    hint: 'Set operation without ALL',
  ),
  FillBlankQuestion(
    id: 'dfb_025f',
    statement: 'CTE stands for Common Table _____.',
    answer: 'Expression',
    topicId: 'advanced_sql',
    hint: 'What does the E stand for?',
  ),
  FillBlankQuestion(
    id: 'dfb_025g',
    statement: 'The _____ command shows the query execution plan and helps identify performance bottlenecks.',
    answer: 'EXPLAIN',
    topicId: 'advanced_sql',
    hint: 'Used to analyze query performance',
  ),
  FillBlankQuestion(
    id: 'dfb_025h',
    statement: '_____ is faster than IN for large datasets because it stops at the first match.',
    answer: 'EXISTS',
    topicId: 'advanced_sql',
    hint: 'Better for checking existence',
  ),
  FillBlankQuestion(
    id: 'dfb_025i',
    statement: 'Avoid using _____ in WHERE clauses on indexed columns as it can disable index usage.',
    answer: 'functions',
    topicId: 'advanced_sql',
    hint: 'UPPER(), LOWER(), etc.',
  ),
  FillBlankQuestion(
    id: 'dfb_025j',
    statement: 'A _____ view caches the result of a complex query as a physical table for faster access.',
    answer: 'materialized',
    topicId: 'advanced_sql',
    hint: 'Type of view that stores data',
  ),
  FillBlankQuestion(
    id: 'dfb_025k',
    statement: '_____ splits large tables into smaller pieces by range, list, or hash for faster queries.',
    answer: 'Partitioning',
    topicId: 'advanced_sql',
    hint: 'Table organization technique',
  ),
  FillBlankQuestion(
    id: 'dfb_025l',
    statement: 'Window functions use _____ BY to divide result sets into groups for calculations.',
    answer: 'PARTITION',
    topicId: 'advanced_sql',
    hint: 'Divides data into windows',
  ),
  FillBlankQuestion(
    id: 'dfb_025m',
    statement: 'Avoid SELECT _____ in production queries to reduce I/O and network traffic.',
    answer: '*',
    topicId: 'advanced_sql',
    hint: 'Wildcard that selects all columns',
  ),
  FillBlankQuestion(
    id: 'dfb_025n',
    statement: '_____ CTEs have a base case and recursive case, useful for hierarchical data like employee organizations.',
    answer: 'Recursive',
    topicId: 'advanced_sql',
    hint: 'Type of CTE that references itself',
  ),
  FillBlankQuestion(
    id: 'dfb_025o',
    statement: 'Creating _____ on frequently queried columns speeds up SELECT operations but slows down INSERT and UPDATE.',
    answer: 'indexes',
    topicId: 'advanced_sql',
    hint: 'Database performance structures',
  ),
  
  // Concurrency Control & Locking
  FillBlankQuestion(
    id: 'dfb_026',
    statement: 'Concurrency control ensures correct results when multiple transactions access the database _____.',
    answer: 'simultaneously',
    topicId: 'concurrency_control',
    hint: 'At the same time',
  ),
  FillBlankQuestion(
    id: 'dfb_026a',
    statement: '_____ Update occurs when two transactions update the same row and one update is lost.',
    answer: 'Lost',
    topicId: 'concurrency_control',
    hint: 'Type of concurrency problem',
  ),
  FillBlankQuestion(
    id: 'dfb_026b',
    statement: 'A _____ Read occurs when a transaction reads uncommitted changes that may later rollback.',
    answer: 'Dirty',
    topicId: 'concurrency_control',
    hint: 'Reading unclean data',
  ),
  FillBlankQuestion(
    id: 'dfb_026c',
    statement: '_____ Read occurs when new rows appear in repeated query results within a transaction.',
    answer: 'Phantom',
    topicId: 'concurrency_control',
    hint: 'Ghost rows that suddenly appear',
  ),
  FillBlankQuestion(
    id: 'dfb_026d',
    statement: 'A _____ Lock allows multiple transactions to read but not write.',
    answer: 'Shared',
    topicId: 'concurrency_control',
    hint: 'Can be held by multiple readers',
  ),
  FillBlankQuestion(
    id: 'dfb_026e',
    statement: 'An _____ Lock allows only one transaction to read or write, blocking all others.',
    answer: 'Exclusive',
    topicId: 'concurrency_control',
    hint: 'Only one transaction at a time',
  ),
  FillBlankQuestion(
    id: 'dfb_026f',
    statement: '_____-level locks provide maximum concurrency but have higher overhead.',
    answer: 'Row',
    topicId: 'concurrency_control',
    hint: 'Finest granularity of locking',
  ),
  FillBlankQuestion(
    id: 'dfb_026g',
    statement: 'Two-Phase Locking has _____ Phase (acquire locks) and Shrinking Phase (release locks).',
    answer: 'Growing',
    topicId: 'concurrency_control',
    hint: 'First phase where locks are acquired',
  ),
  FillBlankQuestion(
    id: 'dfb_026h',
    statement: 'A _____ occurs when two or more transactions wait for each other\'s locks indefinitely.',
    answer: 'deadlock',
    topicId: 'concurrency_control',
    hint: 'Circular wait condition',
  ),
  FillBlankQuestion(
    id: 'dfb_026i',
    statement: 'READ _____ is the isolation level that prevents dirty reads but allows non-repeatable reads.',
    answer: 'COMMITTED',
    topicId: 'concurrency_control',
    hint: 'Default isolation level in most databases',
  ),
  FillBlankQuestion(
    id: 'dfb_026j',
    statement: '_____ is the highest isolation level that prevents all anomalies including phantom reads.',
    answer: 'SERIALIZABLE',
    topicId: 'concurrency_control',
    hint: 'Equivalent to serial execution',
  ),
  FillBlankQuestion(
    id: 'dfb_026k',
    statement: 'SELECT ... FOR _____ acquires an exclusive lock on selected rows.',
    answer: 'UPDATE',
    topicId: 'concurrency_control',
    hint: 'SQL clause for pessimistic locking',
  ),
  FillBlankQuestion(
    id: 'dfb_026l',
    statement: '_____ locking locks data immediately, while optimistic locking checks version before updating.',
    answer: 'Pessimistic',
    topicId: 'concurrency_control',
    hint: 'Assumes conflicts will happen',
  ),
  FillBlankQuestion(
    id: 'dfb_026m',
    statement: 'Strict Two-Phase Locking releases all locks at _____ or rollback.',
    answer: 'commit',
    topicId: 'concurrency_control',
    hint: 'When transaction completes successfully',
  ),
  FillBlankQuestion(
    id: 'dfb_026n',
    statement: '_____ is a deadlock prevention technique that aborts a transaction after waiting too long.',
    answer: 'Timeout',
    topicId: 'concurrency_control',
    hint: 'Time-based prevention method',
  ),
  FillBlankQuestion(
    id: 'dfb_026o',
    statement: 'Keep transactions _____ to reduce lock contention and improve concurrency.',
    answer: 'short',
    topicId: 'concurrency_control',
    hint: 'Best practice for transaction duration',
  ),
  
  // Database Security & Access Control
  FillBlankQuestion(
    id: 'dfb_027',
    statement: '_____ verifies the identity of users before granting access to the database.',
    answer: 'Authentication',
    topicId: 'db_security',
    hint: 'Who you are',
  ),
  FillBlankQuestion(
    id: 'dfb_027a',
    statement: '_____ controls what authenticated users can read, write, update, or delete.',
    answer: 'Authorization',
    topicId: 'db_security',
    hint: 'What you can do',
  ),
  FillBlankQuestion(
    id: 'dfb_027b',
    statement: 'The _____ command is used to give permissions to database users or roles.',
    answer: 'GRANT',
    topicId: 'db_security',
    hint: 'SQL command to give privileges',
  ),
  FillBlankQuestion(
    id: 'dfb_027c',
    statement: 'The _____ command removes privileges from database users or roles.',
    answer: 'REVOKE',
    topicId: 'db_security',
    hint: 'SQL command to remove privileges',
  ),
  FillBlankQuestion(
    id: 'dfb_027d',
    statement: 'Role-Based Access Control (_____ ) assigns users to roles with specific permissions.',
    answer: 'RBAC',
    topicId: 'db_security',
    hint: 'Acronym for role-based access',
  ),
  FillBlankQuestion(
    id: 'dfb_027e',
    statement: '_____ statements prevent SQL injection by separating SQL logic from user data.',
    answer: 'Prepared',
    topicId: 'db_security',
    hint: 'Also called parameterized queries',
  ),
  FillBlankQuestion(
    id: 'dfb_027f',
    statement: 'The principle of _____ privilege means users should have only minimum access needed for their job.',
    answer: 'least',
    topicId: 'db_security',
    hint: 'Minimum necessary access',
  ),
  FillBlankQuestion(
    id: 'dfb_027g',
    statement: 'Row-Level _____ (RLS) controls access at row level based on policies.',
    answer: 'Security',
    topicId: 'db_security',
    hint: 'Fine-grained access control',
  ),
  FillBlankQuestion(
    id: 'dfb_027h',
    statement: '_____ Data Encryption (TDE) encrypts database files at rest.',
    answer: 'Transparent',
    topicId: 'db_security',
    hint: 'Type of encryption for data on disk',
  ),
  FillBlankQuestion(
    id: 'dfb_027i',
    statement: 'SSL/_____ encrypts connections between clients and database servers.',
    answer: 'TLS',
    topicId: 'db_security',
    hint: 'Transport Layer Security',
  ),
  FillBlankQuestion(
    id: 'dfb_027j',
    statement: 'Multi-Factor Authentication (_____ ) requires multiple forms of verification to access the system.',
    answer: 'MFA',
    topicId: 'db_security',
    hint: 'Acronym for multi-factor authentication',
  ),
  FillBlankQuestion(
    id: 'dfb_027k',
    statement: 'Database _____ tracks user activities, detects anomalies, and maintains logs for security analysis.',
    answer: 'auditing',
    topicId: 'db_security',
    hint: 'Recording and monitoring activities',
  ),
  FillBlankQuestion(
    id: 'dfb_027l',
    statement: '_____ injection is an attack that injects malicious SQL code through user inputs.',
    answer: 'SQL',
    topicId: 'db_security',
    hint: 'Common database attack',
  ),
  FillBlankQuestion(
    id: 'dfb_027m',
    statement: 'Column-Level Security hides _____ columns from unauthorized users.',
    answer: 'sensitive',
    topicId: 'db_security',
    hint: 'Confidential or private',
  ),
  FillBlankQuestion(
    id: 'dfb_027n',
    statement: '_____ is a healthcare regulation that requires protection of patient data.',
    answer: 'HIPAA',
    topicId: 'db_security',
    hint: 'US healthcare privacy law',
  ),
  FillBlankQuestion(
    id: 'dfb_027o',
    statement: 'Database Activity Monitoring (_____ ) provides real-time monitoring and alerting for security threats.',
    answer: 'DAM',
    topicId: 'db_security',
    hint: 'Acronym for activity monitoring',
  ),

  // Backup, Recovery & High Availability
  FillBlankQuestion(
    id: 'dfb_028',
    statement: 'A _____ backup is a complete copy of the entire database.',
    answer: 'Full',
    topicId: 'backup_recovery',
    hint: 'Opposite of partial or incremental',
  ),
  FillBlankQuestion(
    id: 'dfb_028a',
    statement: '_____ backup stores only changes made since the last backup.',
    answer: 'Incremental',
    topicId: 'backup_recovery',
    hint: 'Only the changes since last backup',
  ),
  FillBlankQuestion(
    id: 'dfb_028b',
    statement: '_____ backup stores changes since the last full backup.',
    answer: 'Differential',
    topicId: 'backup_recovery',
    hint: 'Between full and incremental',
  ),
  FillBlankQuestion(
    id: 'dfb_028c',
    statement: 'Point-in-Time Recovery (_____ ) allows restoring database to a specific timestamp.',
    answer: 'PITR',
    topicId: 'backup_recovery',
    hint: 'Acronym with "R" for recovery',
  ),
  FillBlankQuestion(
    id: 'dfb_028d',
    statement: 'WAL stands for Write-Ahead _____ in PostgreSQL.',
    answer: 'Log',
    topicId: 'backup_recovery',
    hint: 'Transaction record',
  ),
  FillBlankQuestion(
    id: 'dfb_028e',
    statement: 'The 3-2-1 rule requires _____ copies of data, 2 different media, and 1 offsite copy.',
    answer: '3',
    topicId: 'backup_recovery',
    hint: 'The first number in 3-2-1',
  ),
  FillBlankQuestion(
    id: 'dfb_028f',
    statement: 'In Master-Slave replication, _____ operations are performed only on the master.',
    answer: 'Write',
    topicId: 'backup_recovery',
    hint: 'INSERT, UPDATE, DELETE operations',
  ),
  FillBlankQuestion(
    id: 'dfb_028g',
    statement: '_____ replication ensures no data loss but slower performance.',
    answer: 'Synchronous',
    topicId: 'backup_recovery',
    hint: 'Opposite of asynchronous',
  ),
  FillBlankQuestion(
    id: 'dfb_028h',
    statement: '_____ is the automatic switch to a standby server when the primary fails.',
    answer: 'Failover',
    topicId: 'backup_recovery',
    hint: 'Switching from failed server',
  ),
  FillBlankQuestion(
    id: 'dfb_028i',
    statement: 'RTO stands for Recovery Time _____ .',
    answer: 'Objective',
    topicId: 'backup_recovery',
    hint: 'Goal or target',
  ),
  FillBlankQuestion(
    id: 'dfb_028j',
    statement: 'RPO stands for Recovery _____ Objective.',
    answer: 'Point',
    topicId: 'backup_recovery',
    hint: 'Refers to a specific moment in time',
  ),
  FillBlankQuestion(
    id: 'dfb_028k',
    statement: '_____ backup exports schema and data in SQL/text format.',
    answer: 'Logical',
    topicId: 'backup_recovery',
    hint: 'Opposite of physical',
  ),
  FillBlankQuestion(
    id: 'dfb_028l',
    statement: 'The tool _____ is used for automated PostgreSQL high availability with failover.',
    answer: 'Patroni',
    topicId: 'backup_recovery',
    hint: 'PostgreSQL HA tool starting with P',
  ),
  FillBlankQuestion(
    id: 'dfb_028m',
    statement: 'MySQL _____ logs enable Point-in-Time Recovery by recording all database changes.',
    answer: 'Binary',
    topicId: 'backup_recovery',
    hint: 'MySQL transaction logs',
  ),
  FillBlankQuestion(
    id: 'dfb_028n',
    statement: '_____ backups should be encrypted to protect against data breaches.',
    answer: 'All',
    topicId: 'backup_recovery',
    hint: 'How many backups?',
  ),
  FillBlankQuestion(
    id: 'dfb_028o',
    statement: 'High Availability ensures database remains accessible with minimal _____ .',
    answer: 'Downtime',
    topicId: 'backup_recovery',
    hint: 'Period when system is unavailable',
  ),

  // NoSQL & Big Data Databases
  FillBlankQuestion(
    id: 'dfb_029',
    statement: 'NoSQL stands for _____ Only SQL.',
    answer: 'Not',
    topicId: 'nosql_bigdata',
    hint: 'Opposite of yes',
  ),
  FillBlankQuestion(
    id: 'dfb_029a',
    statement: '_____ is a popular document-oriented NoSQL database.',
    answer: 'MongoDB',
    topicId: 'nosql_bigdata',
    hint: 'Starts with "Mongo"',
  ),
  FillBlankQuestion(
    id: 'dfb_029b',
    statement: '_____ is a key-value store used for caching and session management.',
    answer: 'Redis',
    topicId: 'nosql_bigdata',
    hint: 'In-memory database starting with R',
  ),
  FillBlankQuestion(
    id: 'dfb_029c',
    statement: '_____ is a graph database that uses Cypher query language.',
    answer: 'Neo4j',
    topicId: 'nosql_bigdata',
    hint: 'Graph database starting with N',
  ),
  FillBlankQuestion(
    id: 'dfb_029d',
    statement: '_____ is a column-oriented database designed for high write throughput.',
    answer: 'Cassandra',
    topicId: 'nosql_bigdata',
    hint: 'Apache column database',
  ),
  FillBlankQuestion(
    id: 'dfb_029e',
    statement: 'CAP theorem stands for Consistency, Availability, and Partition _____ .',
    answer: 'Tolerance',
    topicId: 'nosql_bigdata',
    hint: 'Ability to handle network issues',
  ),
  FillBlankQuestion(
    id: 'dfb_029f',
    statement: 'Cassandra is an _____ system, prioritizing Availability and Partition Tolerance.',
    answer: 'AP',
    topicId: 'nosql_bigdata',
    hint: 'Two-letter CAP acronym',
  ),
  FillBlankQuestion(
    id: 'dfb_029g',
    statement: 'MongoDB stores data in _____ format (Binary JSON).',
    answer: 'BSON',
    topicId: 'nosql_bigdata',
    hint: 'Binary version of JSON',
  ),
  FillBlankQuestion(
    id: 'dfb_029h',
    statement: '_____ scaling adds more servers to distribute load, unlike vertical scaling.',
    answer: 'Horizontal',
    topicId: 'nosql_bigdata',
    hint: 'Opposite of vertical',
  ),
  FillBlankQuestion(
    id: 'dfb_029i',
    statement: 'Neo4j uses _____ query language for graph pattern matching.',
    answer: 'Cypher',
    topicId: 'nosql_bigdata',
    hint: 'Graph query language',
  ),
  FillBlankQuestion(
    id: 'dfb_029j',
    statement: 'HDFS stands for Hadoop _____ File System.',
    answer: 'Distributed',
    topicId: 'nosql_bigdata',
    hint: 'Spread across multiple nodes',
  ),
  FillBlankQuestion(
    id: 'dfb_029k',
    statement: 'Apache _____ provides in-memory processing, much faster than MapReduce.',
    answer: 'Spark',
    topicId: 'nosql_bigdata',
    hint: 'Fast processing engine',
  ),
  FillBlankQuestion(
    id: 'dfb_029l',
    statement: '_____ consistency means all replicas will sync eventually, but may have temporary inconsistencies.',
    answer: 'Eventual',
    topicId: 'nosql_bigdata',
    hint: 'Will happen in the future',
  ),
  FillBlankQuestion(
    id: 'dfb_029m',
    statement: 'NoSQL databases are _____ -less, allowing flexible data structures without migrations.',
    answer: 'Schema',
    topicId: 'nosql_bigdata',
    hint: 'Data structure definition',
  ),
  FillBlankQuestion(
    id: 'dfb_029n',
    statement: '_____ is the technique of dividing data across multiple servers in NoSQL.',
    answer: 'Sharding',
    topicId: 'nosql_bigdata',
    hint: 'Data partitioning technique',
  ),
  FillBlankQuestion(
    id: 'dfb_029o',
    statement: '_____ persistence refers to using multiple database types (SQL and NoSQL) for different needs.',
    answer: 'Polyglot',
    topicId: 'nosql_bigdata',
    hint: 'Multiple languages or types',
  ),

  // Data Warehousing & OLAP
  FillBlankQuestion(
    id: 'dfb_030',
    statement: 'A Data _____ is a centralized repository for historical data from multiple sources.',
    answer: 'Warehouse',
    topicId: 'data_warehousing',
    hint: 'Storage facility for data',
  ),
  FillBlankQuestion(
    id: 'dfb_030a',
    statement: 'OLAP stands for Online _____ Processing.',
    answer: 'Analytical',
    topicId: 'data_warehousing',
    hint: 'Related to analysis',
  ),
  FillBlankQuestion(
    id: 'dfb_030b',
    statement: 'OLTP stands for Online _____ Processing.',
    answer: 'Transaction',
    topicId: 'data_warehousing',
    hint: 'Real-time operations',
  ),
  FillBlankQuestion(
    id: 'dfb_030c',
    statement: 'ETL stands for Extract, Transform, and _____ .',
    answer: 'Load',
    topicId: 'data_warehousing',
    hint: 'Final step of data integration',
  ),
  FillBlankQuestion(
    id: 'dfb_030d',
    statement: '_____ Schema has a central fact table surrounded by denormalized dimension tables.',
    answer: 'Star',
    topicId: 'data_warehousing',
    hint: 'Named after a celestial object',
  ),
  FillBlankQuestion(
    id: 'dfb_030e',
    statement: '_____ Schema normalizes dimensions into multiple related tables.',
    answer: 'Snowflake',
    topicId: 'data_warehousing',
    hint: 'Named after frozen precipitation',
  ),
  FillBlankQuestion(
    id: 'dfb_030f',
    statement: '_____ tables store measures and metrics in a data warehouse.',
    answer: 'Fact',
    topicId: 'data_warehousing',
    hint: 'Contains numerical data',
  ),
  FillBlankQuestion(
    id: 'dfb_030g',
    statement: '_____ tables store descriptive attributes in a data warehouse.',
    answer: 'Dimension',
    topicId: 'data_warehousing',
    hint: 'Contains context and categories',
  ),
  FillBlankQuestion(
    id: 'dfb_030h',
    statement: '_____ -Down operation moves from summary to detailed data.',
    answer: 'Drill',
    topicId: 'data_warehousing',
    hint: 'Going deeper into data',
  ),
  FillBlankQuestion(
    id: 'dfb_030i',
    statement: 'Roll- _____ operation summarizes data along a hierarchy.',
    answer: 'Up',
    topicId: 'data_warehousing',
    hint: 'Opposite of down',
  ),
  FillBlankQuestion(
    id: 'dfb_030j',
    statement: 'MOLAP stores data in multidimensional _____ .',
    answer: 'Cubes',
    topicId: 'data_warehousing',
    hint: '3D data structures',
  ),
  FillBlankQuestion(
    id: 'dfb_030k',
    statement: '_____ uses relational databases for OLAP operations.',
    answer: 'ROLAP',
    topicId: 'data_warehousing',
    hint: 'Relational OLAP',
  ),
  FillBlankQuestion(
    id: 'dfb_030l',
    statement: '_____ creates hierarchical subtotals at each grouping level in SQL.',
    answer: 'ROLLUP',
    topicId: 'data_warehousing',
    hint: 'SQL aggregation clause',
  ),
  FillBlankQuestion(
    id: 'dfb_030m',
    statement: '_____ generates all possible aggregation combinations in SQL.',
    answer: 'CUBE',
    topicId: 'data_warehousing',
    hint: 'Multidimensional SQL clause',
  ),
  FillBlankQuestion(
    id: 'dfb_030n',
    statement: 'Amazon _____ is a popular cloud data warehouse platform.',
    answer: 'Redshift',
    topicId: 'data_warehousing',
    hint: 'AWS data warehouse service',
  ),
  FillBlankQuestion(
    id: 'dfb_030o',
    statement: 'A Data _____ is a subset of a data warehouse for a specific business area.',
    answer: 'Mart',
    topicId: 'data_warehousing',
    hint: 'Smaller, departmental warehouse',
  ),
  
  // Database Performance & Monitoring
  FillBlankQuestion(
    id: 'dfb_031',
    statement: 'Query _____ time measures how long it takes to execute a database query.',
    answer: 'Response',
    topicId: 'db_performance',
    hint: 'Time from query submission to result return',
  ),
  FillBlankQuestion(
    id: 'dfb_031a',
    statement: '_____ is the number of queries a database can handle per second.',
    answer: 'Throughput',
    topicId: 'db_performance',
    hint: 'Measured in QPS (Queries Per Second)',
  ),
  FillBlankQuestion(
    id: 'dfb_031b',
    statement: 'Cache _____ ratio measures the percentage of reads served from memory vs disk.',
    answer: 'Hit',
    topicId: 'db_performance',
    hint: 'Should be > 95% for optimal performance',
  ),
  FillBlankQuestion(
    id: 'dfb_031c',
    statement: 'The _____ command shows the execution plan of a SQL query.',
    answer: 'EXPLAIN',
    topicId: 'db_performance',
    hint: 'Reveals if indexes are used',
  ),
  FillBlankQuestion(
    id: 'dfb_031d',
    statement: 'A _____ index includes all columns needed by a query, eliminating table lookups.',
    answer: 'Covering',
    topicId: 'db_performance',
    hint: 'No need to access the actual table',
  ),
  FillBlankQuestion(
    id: 'dfb_031e',
    statement: '_____ pooling reuses database connections to reduce connection overhead.',
    answer: 'Connection',
    topicId: 'db_performance',
    hint: 'Improves efficiency by avoiding repeated connection setup',
  ),
  FillBlankQuestion(
    id: 'dfb_031f',
    statement: 'Disk _____ measures the number of read/write operations per second.',
    answer: 'I/O',
    topicId: 'db_performance',
    hint: 'Input/Output operations',
  ),
  FillBlankQuestion(
    id: 'dfb_031g',
    statement: 'A _____ occurs when two transactions wait for each other to release locks.',
    answer: 'Deadlock',
    topicId: 'db_performance',
    hint: 'Should be < 5 per hour',
  ),
  FillBlankQuestion(
    id: 'dfb_031h',
    statement: '_____ is a PostgreSQL extension that tracks query execution statistics.',
    answer: 'pg_stat_statements',
    topicId: 'db_performance',
    hint: 'Must be enabled in postgresql.conf',
  ),
  FillBlankQuestion(
    id: 'dfb_031i',
    statement: 'The slow query _____ captures queries exceeding a specified execution time threshold.',
    answer: 'Log',
    topicId: 'db_performance',
    hint: 'Used for identifying performance bottlenecks',
  ),
  FillBlankQuestion(
    id: 'dfb_031j',
    statement: '_____ + Grafana is a popular open-source stack for database monitoring and visualization.',
    answer: 'Prometheus',
    topicId: 'db_performance',
    hint: 'Time-series metrics collection',
  ),
  FillBlankQuestion(
    id: 'dfb_031k',
    statement: 'Avoid using SELECT _____ as it fetches unnecessary columns and slows performance.',
    answer: '*',
    topicId: 'db_performance',
    hint: 'Wildcard that selects all columns',
  ),
  FillBlankQuestion(
    id: 'dfb_031l',
    statement: '_____ is faster than IN for large subqueries as it stops at the first match.',
    answer: 'EXISTS',
    topicId: 'db_performance',
    hint: 'Returns true as soon as one matching row is found',
  ),
  FillBlankQuestion(
    id: 'dfb_031m',
    statement: 'The _____ command in PostgreSQL reclaims space from deleted or updated rows.',
    answer: 'VACUUM',
    topicId: 'db_performance',
    hint: 'Also updates table statistics',
  ),
  FillBlankQuestion(
    id: 'dfb_031n',
    statement: 'Table _____ divides large tables into smaller pieces based on criteria like date or region.',
    answer: 'Partitioning',
    topicId: 'db_performance',
    hint: 'Improves query performance and maintenance',
  ),
  FillBlankQuestion(
    id: 'dfb_031o',
    statement: 'The recommended buffer pool size for MySQL is _____% of available RAM.',
    answer: '60-70',
    topicId: 'db_performance',
    hint: 'Stores frequently accessed data pages in memory',
  ),
  
  // Stored Procedures & Functions
  FillBlankQuestion(
    id: 'dfb_032',
    statement: 'Stored _____ are precompiled SQL blocks stored in the database for automation and performance.',
    answer: 'Procedures',
    topicId: 'stored_procedures',
    hint: 'Executed using CALL statement',
  ),
  FillBlankQuestion(
    id: 'dfb_032a',
    statement: 'A _____ returns a single value and can be used in SELECT statements.',
    answer: 'Function',
    topicId: 'stored_procedures',
    hint: 'Has a RETURNS clause',
  ),
  FillBlankQuestion(
    id: 'dfb_032b',
    statement: 'The _____ statement is used to execute a stored procedure.',
    answer: 'CALL',
    topicId: 'stored_procedures',
    hint: 'Syntax: CALL procedure_name(parameters)',
  ),
  FillBlankQuestion(
    id: 'dfb_032c',
    statement: '_____ changes the statement terminator to allow multiple statements in a procedure body.',
    answer: 'DELIMITER',
    topicId: 'stored_procedures',
    hint: 'Commonly changed to //',
  ),
  FillBlankQuestion(
    id: 'dfb_032d',
    statement: 'An _____ parameter is used for input only in stored procedures.',
    answer: 'IN',
    topicId: 'stored_procedures',
    hint: 'Read-only parameter',
  ),
  FillBlankQuestion(
    id: 'dfb_032e',
    statement: 'An _____ parameter is used for output only in stored procedures.',
    answer: 'OUT',
    topicId: 'stored_procedures',
    hint: 'Write-only parameter',
  ),
  FillBlankQuestion(
    id: 'dfb_032f',
    statement: 'An _____ parameter can be used for both input and output in stored procedures.',
    answer: 'INOUT',
    topicId: 'stored_procedures',
    hint: 'Read and write parameter',
  ),
  FillBlankQuestion(
    id: 'dfb_032g',
    statement: 'A _____ function always returns the same result for the same inputs.',
    answer: 'DETERMINISTIC',
    topicId: 'stored_procedures',
    hint: 'Opposite of NON-DETERMINISTIC',
  ),
  FillBlankQuestion(
    id: 'dfb_032h',
    statement: 'DECLARE _____ manages errors in stored procedures.',
    answer: 'HANDLER',
    topicId: 'stored_procedures',
    hint: 'Can be CONTINUE or EXIT handler',
  ),
  FillBlankQuestion(
    id: 'dfb_032i',
    statement: 'An EXIT _____ stops procedure execution when an error occurs.',
    answer: 'HANDLER',
    topicId: 'stored_procedures',
    hint: 'Used for critical errors requiring rollback',
  ),
  FillBlankQuestion(
    id: 'dfb_032j',
    statement: '_____ raises a custom error in a stored procedure.',
    answer: 'SIGNAL',
    topicId: 'stored_procedures',
    hint: 'Uses SQLSTATE and MESSAGE_TEXT',
  ),
  FillBlankQuestion(
    id: 'dfb_032k',
    statement: 'The _____ clause specifies the return type of a function.',
    answer: 'RETURNS',
    topicId: 'stored_procedures',
    hint: 'Example: RETURNS INT or RETURNS DECIMAL(10,2)',
  ),
  FillBlankQuestion(
    id: 'dfb_032l',
    statement: 'Stored procedures support _____ control with COMMIT and ROLLBACK.',
    answer: 'Transaction',
    topicId: 'stored_procedures',
    hint: 'Ensures atomicity of operations',
  ),
  FillBlankQuestion(
    id: 'dfb_032m',
    statement: 'The Event _____ automates procedure execution on a schedule.',
    answer: 'Scheduler',
    topicId: 'stored_procedures',
    hint: 'Enable with SET GLOBAL event_scheduler = ON',
  ),
  FillBlankQuestion(
    id: 'dfb_032n',
    statement: 'Stored procedures are _____% faster than dynamic SQL due to execution plan caching.',
    answer: '30-50',
    topicId: 'stored_procedures',
    hint: 'Precompiled and cached',
  ),
  FillBlankQuestion(
    id: 'dfb_032o',
    statement: '_____ tables store intermediate results within procedure scope.',
    answer: 'Temporary',
    topicId: 'stored_procedures',
    hint: 'Created with CREATE TEMPORARY TABLE',
  ),
  
  // Triggers & Event Handling
  FillBlankQuestion(
    id: 'dfb_033',
    statement: 'A _____ is a special stored program that automatically executes when INSERT, UPDATE, or DELETE occurs.',
    answer: 'Trigger',
    topicId: 'triggers_events',
    hint: 'Event-driven database object',
  ),
  FillBlankQuestion(
    id: 'dfb_033a',
    statement: 'BEFORE triggers execute _____ the operation and can modify NEW values.',
    answer: 'before',
    topicId: 'triggers_events',
    hint: 'Timing of execution',
  ),
  FillBlankQuestion(
    id: 'dfb_033b',
    statement: 'AFTER triggers execute _____ the operation and are used for logging.',
    answer: 'after',
    topicId: 'triggers_events',
    hint: 'Timing for audit trails',
  ),
  FillBlankQuestion(
    id: 'dfb_033c',
    statement: 'The _____ pseudo-record contains original row data in UPDATE and DELETE triggers.',
    answer: 'OLD',
    topicId: 'triggers_events',
    hint: 'Accesses data before changes',
  ),
  FillBlankQuestion(
    id: 'dfb_033d',
    statement: 'The _____ pseudo-record contains new row data in INSERT and UPDATE triggers.',
    answer: 'NEW',
    topicId: 'triggers_events',
    hint: 'Accesses data after changes',
  ),
  FillBlankQuestion(
    id: 'dfb_033e',
    statement: '_____ raises a custom error in a trigger to prevent invalid operations.',
    answer: 'SIGNAL',
    topicId: 'triggers_events',
    hint: 'Uses SQLSTATE and MESSAGE_TEXT',
  ),
  FillBlankQuestion(
    id: 'dfb_033f',
    statement: 'FOR EACH _____ means the trigger executes once per affected row.',
    answer: 'ROW',
    topicId: 'triggers_events',
    hint: 'Row-level processing',
  ),
  FillBlankQuestion(
    id: 'dfb_033g',
    statement: 'Use _____ to change the statement terminator when creating multi-line triggers.',
    answer: 'DELIMITER',
    topicId: 'triggers_events',
    hint: 'Commonly changed to //',
  ),
  FillBlankQuestion(
    id: 'dfb_033h',
    statement: '_____ are scheduled tasks that run automatically at specified time intervals.',
    answer: 'Events',
    topicId: 'triggers_events',
    hint: 'Database-managed cron jobs',
  ),
  FillBlankQuestion(
    id: 'dfb_033i',
    statement: 'The Event _____ must be enabled to run scheduled database tasks.',
    answer: 'Scheduler',
    topicId: 'triggers_events',
    hint: 'SET GLOBAL event_scheduler = ON',
  ),
  FillBlankQuestion(
    id: 'dfb_033j',
    statement: 'ON SCHEDULE _____ creates a one-time event at a specific date/time.',
    answer: 'AT',
    topicId: 'triggers_events',
    hint: 'For single execution',
  ),
  FillBlankQuestion(
    id: 'dfb_033k',
    statement: 'ON SCHEDULE _____ creates a recurring event at regular intervals.',
    answer: 'EVERY',
    topicId: 'triggers_events',
    hint: 'EVERY 1 DAY, EVERY 1 MONTH',
  ),
  FillBlankQuestion(
    id: 'dfb_033l',
    statement: 'DROP TRIGGER IF _____ safely removes a trigger without error if not found.',
    answer: 'EXISTS',
    topicId: 'triggers_events',
    hint: 'Prevents error on missing trigger',
  ),
  FillBlankQuestion(
    id: 'dfb_033m',
    statement: 'Triggers enforce business rules at the _____ level, not application level.',
    answer: 'database',
    topicId: 'triggers_events',
    hint: 'Cannot be bypassed by applications',
  ),
  FillBlankQuestion(
    id: 'dfb_033n',
    statement: 'AFTER DELETE triggers are commonly used to _____ deleted data to archive tables.',
    answer: 'backup',
    topicId: 'triggers_events',
    hint: 'Data recovery and audit purposes',
  ),
  FillBlankQuestion(
    id: 'dfb_033o',
    statement: 'Triggers act like database _____, silently watching data and reacting instantly.',
    answer: 'guardians',
    topicId: 'triggers_events',
    hint: 'Automatic data protection',
  ),
  
  // Views & Materialized Views
  FillBlankQuestion(
    id: 'dfb_034',
    statement: 'A _____ is a virtual table created from a SQL query that does not store data physically.',
    answer: 'View',
    topicId: 'views_materialized',
    hint: 'Saved query, not physical storage',
  ),
  FillBlankQuestion(
    id: 'dfb_034a',
    statement: 'A _____ table shows the result of a stored SELECT query each time you access it.',
    answer: 'virtual',
    topicId: 'views_materialized',
    hint: 'Not physical, just a window',
  ),
  FillBlankQuestion(
    id: 'dfb_034b',
    statement: 'A Materialized View stores query results _____ on disk for faster access.',
    answer: 'physically',
    topicId: 'views_materialized',
    hint: 'Actual storage, not virtual',
  ),
  FillBlankQuestion(
    id: 'dfb_034c',
    statement: 'Materialized Views create a _____ copy of data that must be refreshed to update.',
    answer: 'cached',
    topicId: 'views_materialized',
    hint: 'Precomputed and stored results',
  ),
  FillBlankQuestion(
    id: 'dfb_034d',
    statement: 'The _____ MATERIALIZED VIEW command updates cached data in PostgreSQL.',
    answer: 'REFRESH',
    topicId: 'views_materialized',
    hint: 'Regenerates the stored results',
  ),
  FillBlankQuestion(
    id: 'dfb_034e',
    statement: 'Views provide a _____ layer that hides sensitive columns from specific users.',
    answer: 'security',
    topicId: 'views_materialized',
    hint: 'Data access control and protection',
  ),
  FillBlankQuestion(
    id: 'dfb_034f',
    statement: 'CREATE OR _____ VIEW modifies an existing view without dropping it first.',
    answer: 'REPLACE',
    topicId: 'views_materialized',
    hint: 'Alter view definition in one command',
  ),
  FillBlankQuestion(
    id: 'dfb_034g',
    statement: 'Materialized Views improve query _____ by 10-100x for complex aggregations.',
    answer: 'performance',
    topicId: 'views_materialized',
    hint: 'Speed, faster execution',
  ),
  FillBlankQuestion(
    id: 'dfb_034h',
    statement: 'Regular views always show _____ data as they execute the query every time.',
    answer: 'current',
    topicId: 'views_materialized',
    hint: 'Up-to-date, latest information',
  ),
  FillBlankQuestion(
    id: 'dfb_034i',
    statement: 'Materialized Views may show _____ data if not refreshed regularly.',
    answer: 'stale',
    topicId: 'views_materialized',
    hint: 'Outdated, not current',
  ),
  FillBlankQuestion(
    id: 'dfb_034j',
    statement: 'Views with GROUP BY, aggregates, or DISTINCT are not _____.',
    answer: 'updatable',
    topicId: 'views_materialized',
    hint: 'Cannot modify base tables through them',
  ),
  FillBlankQuestion(
    id: 'dfb_034k',
    statement: 'Views _____ complex JOINs and calculations behind simple SELECT statements.',
    answer: 'simplify',
    topicId: 'views_materialized',
    hint: 'Make easier, reduce complexity',
  ),
  FillBlankQuestion(
    id: 'dfb_034l',
    statement: 'Materialized Views are ideal for _____ and analytics queries requiring precomputed data.',
    answer: 'dashboards',
    topicId: 'views_materialized',
    hint: 'Business intelligence reports',
  ),
  FillBlankQuestion(
    id: 'dfb_034m',
    statement: 'Materialized Views require extra _____ space to store cached results.',
    answer: 'storage',
    topicId: 'views_materialized',
    hint: 'Disk space, memory',
  ),
  FillBlankQuestion(
    id: 'dfb_034n',
    statement: 'Best practice: Prefix materialized views with _____ for clarity.',
    answer: 'mv_',
    topicId: 'views_materialized',
    hint: 'Naming convention abbreviation',
  ),
  FillBlankQuestion(
    id: 'dfb_034o',
    statement: 'Views provide data _____ layer between applications and database schema.',
    answer: 'abstraction',
    topicId: 'views_materialized',
    hint: 'Separation, decoupling',
  ),
  
  // Data Integrity & Constraints
  FillBlankQuestion(
    id: 'dfb_035',
    statement: 'Data _____ ensures that data is accurate, consistent, and reliable throughout its life cycle.',
    answer: 'Integrity',
    topicId: 'data_integrity',
    hint: 'Correctness and trustworthiness of data',
  ),
  FillBlankQuestion(
    id: 'dfb_035a',
    statement: '_____ Integrity requires each table to have a PRIMARY KEY for unique row identification.',
    answer: 'Entity',
    topicId: 'data_integrity',
    hint: 'Individual record uniqueness',
  ),
  FillBlankQuestion(
    id: 'dfb_035b',
    statement: '_____ Integrity maintains valid relationships between tables using FOREIGN KEYs.',
    answer: 'Referential',
    topicId: 'data_integrity',
    hint: 'Table relationships and references',
  ),
  FillBlankQuestion(
    id: 'dfb_035c',
    statement: 'PRIMARY KEY constraint ensures unique and _____ identification of rows.',
    answer: 'non-null',
    topicId: 'data_integrity',
    hint: 'Cannot be empty or missing',
  ),
  FillBlankQuestion(
    id: 'dfb_035d',
    statement: 'FOREIGN KEY constraint prevents _____ records that have no valid parent reference.',
    answer: 'orphaned',
    topicId: 'data_integrity',
    hint: 'Child records without parent',
  ),
  FillBlankQuestion(
    id: 'dfb_035e',
    statement: '_____ constraint prevents duplicate values in a column but allows NULL.',
    answer: 'UNIQUE',
    topicId: 'data_integrity',
    hint: 'No duplicates, one NULL allowed',
  ),
  FillBlankQuestion(
    id: 'dfb_035f',
    statement: 'NOT _____ constraint ensures mandatory fields cannot be left empty.',
    answer: 'NULL',
    topicId: 'data_integrity',
    hint: 'Required field, no missing values',
  ),
  FillBlankQuestion(
    id: 'dfb_035g',
    statement: '_____ constraint restricts values based on conditions like age >= 0 or salary > 0.',
    answer: 'CHECK',
    topicId: 'data_integrity',
    hint: 'Validation rule, conditional restriction',
  ),
  FillBlankQuestion(
    id: 'dfb_035h',
    statement: 'DEFAULT constraint provides automatic _____ when none is supplied during insertion.',
    answer: 'values',
    topicId: 'data_integrity',
    hint: 'Fallback data, default assignment',
  ),
  FillBlankQuestion(
    id: 'dfb_035i',
    statement: 'ON DELETE _____ automatically deletes dependent child rows when parent is deleted.',
    answer: 'CASCADE',
    topicId: 'data_integrity',
    hint: 'Propagate deletion, chain deletion',
  ),
  FillBlankQuestion(
    id: 'dfb_035j',
    statement: 'ON DELETE SET _____ sets foreign key to NULL when parent record is deleted.',
    answer: 'NULL',
    topicId: 'data_integrity',
    hint: 'Optional relationship, empty reference',
  ),
  FillBlankQuestion(
    id: 'dfb_035k',
    statement: 'ON DELETE _____ prevents deletion if child records exist (default behavior).',
    answer: 'RESTRICT',
    topicId: 'data_integrity',
    hint: 'Block deletion, prevent cascade',
  ),
  FillBlankQuestion(
    id: 'dfb_035l',
    statement: 'ALTER TABLE ADD _____ adds constraints to existing tables after creation.',
    answer: 'CONSTRAINT',
    topicId: 'data_integrity',
    hint: 'Add rule, modify table structure',
  ),
  FillBlankQuestion(
    id: 'dfb_035m',
    statement: 'A table can have only _____ PRIMARY KEY but multiple UNIQUE constraints.',
    answer: 'one',
    topicId: 'data_integrity',
    hint: 'Single identifier, unique per table',
  ),
  FillBlankQuestion(
    id: 'dfb_035n',
    statement: 'Constraints enforce rules at _____ level, protecting data even if application has bugs.',
    answer: 'database',
    topicId: 'data_integrity',
    hint: 'Server-side, centralized enforcement',
  ),
  FillBlankQuestion(
    id: 'dfb_035o',
    statement: 'Best practice: Name constraints descriptively using prefixes like pk_, fk_, uq_, and _____.',
    answer: 'chk_',
    topicId: 'data_integrity',
    hint: 'CHECK constraint prefix',
  ),
  
  // Replication & Clustering
  FillBlankQuestion(
    id: 'dfb_036',
    statement: '_____ creates copies of database across multiple servers for availability and performance.',
    answer: 'Replication',
    topicId: 'replication_clustering',
    hint: 'Data redundancy across servers',
  ),
  FillBlankQuestion(
    id: 'dfb_036a',
    statement: '_____ connects multiple database servers to work as a single unified system.',
    answer: 'Clustering',
    topicId: 'replication_clustering',
    hint: 'Grouping servers as one system',
  ),
  FillBlankQuestion(
    id: 'dfb_036b',
    statement: 'In Master-_____ replication, writes go to master and reads distributed to replicas.',
    answer: 'Slave',
    topicId: 'replication_clustering',
    hint: 'Also called Primary-Replica',
  ),
  FillBlankQuestion(
    id: 'dfb_036c',
    statement: 'Replication _____ is the time delay between write on master and appearance on replica.',
    answer: 'lag',
    topicId: 'replication_clustering',
    hint: 'Delay in data synchronization',
  ),
  FillBlankQuestion(
    id: 'dfb_036d',
    statement: '_____ replication provides faster writes with eventual consistency but risk of data loss.',
    answer: 'Asynchronous',
    topicId: 'replication_clustering',
    hint: 'Master does not wait for replicas',
  ),
  FillBlankQuestion(
    id: 'dfb_036e',
    statement: 'Synchronous replication ensures _____ data loss but slower writes.',
    answer: 'zero',
    topicId: 'replication_clustering',
    hint: 'No data loss, strong consistency',
  ),
  FillBlankQuestion(
    id: 'dfb_036f',
    statement: '_____ automatically promotes replica to primary when master fails.',
    answer: 'Failover',
    topicId: 'replication_clustering',
    hint: 'Automatic switchover process',
  ),
  FillBlankQuestion(
    id: 'dfb_036g',
    statement: 'Active-_____ clustering has all nodes serving requests concurrently.',
    answer: 'Active',
    topicId: 'replication_clustering',
    hint: 'Multi-master, all nodes active',
  ),
  FillBlankQuestion(
    id: 'dfb_036h',
    statement: 'MySQL uses _____ log to record all changes for replication to slaves.',
    answer: 'binary',
    topicId: 'replication_clustering',
    hint: 'Log file for replication stream',
  ),
  FillBlankQuestion(
    id: 'dfb_036i',
    statement: 'PostgreSQL uses _____ replication for continuous data transfer using WAL.',
    answer: 'streaming',
    topicId: 'replication_clustering',
    hint: 'Write-Ahead Log based replication',
  ),
  FillBlankQuestion(
    id: 'dfb_036j',
    statement: '_____ automates PostgreSQL high availability using Etcd for coordination.',
    answer: 'Patroni',
    topicId: 'replication_clustering',
    hint: 'HA tool for PostgreSQL clusters',
  ),
  FillBlankQuestion(
    id: 'dfb_036k',
    statement: 'Read _____ optimize read-heavy workloads by offloading queries from master.',
    answer: 'replicas',
    topicId: 'replication_clustering',
    hint: 'Copies serving read requests',
  ),
  FillBlankQuestion(
    id: 'dfb_036l',
    statement: 'Load _____ distribute client connections and queries across database nodes.',
    answer: 'balancers',
    topicId: 'replication_clustering',
    hint: 'HAProxy, PgBouncer tools',
  ),
  FillBlankQuestion(
    id: 'dfb_036m',
    statement: 'MongoDB Replica Sets provide automatic failover with leader election in _____ seconds.',
    answer: '10-12',
    topicId: 'replication_clustering',
    hint: 'Typical election time range',
  ),
  FillBlankQuestion(
    id: 'dfb_036n',
    statement: '_____ requires odd number of nodes (3, 5, 7) to prevent split-brain scenarios.',
    answer: 'Quorum',
    topicId: 'replication_clustering',
    hint: 'Majority voting mechanism',
  ),
  FillBlankQuestion(
    id: 'dfb_036o',
    statement: 'Best practice: Backup from _____ to avoid impacting live master performance.',
    answer: 'replica',
    topicId: 'replication_clustering',
    hint: 'Secondary server, not primary',
  ),
  
  // Partitioning & Sharding
  FillBlankQuestion(
    id: 'dfb_037',
    statement: '_____ divides a large database table into smaller logical parts within the same database server.',
    answer: 'Partitioning',
    topicId: 'partitioning_sharding',
    hint: 'Organizing data within one server',
  ),
  FillBlankQuestion(
    id: 'dfb_037a',
    statement: '_____ distributes data across multiple database servers for horizontal scaling.',
    answer: 'Sharding',
    topicId: 'partitioning_sharding',
    hint: 'Splitting data across servers',
  ),
  FillBlankQuestion(
    id: 'dfb_037b',
    statement: '_____ partitioning divides data based on value ranges like dates or IDs.',
    answer: 'Range',
    topicId: 'partitioning_sharding',
    hint: 'Based on ranges, good for time-series',
  ),
  FillBlankQuestion(
    id: 'dfb_037c',
    statement: '_____ partitioning uses a hash function to distribute data evenly across partitions.',
    answer: 'Hash',
    topicId: 'partitioning_sharding',
    hint: 'Even distribution, no hotspots',
  ),
  FillBlankQuestion(
    id: 'dfb_037d',
    statement: 'Query optimizer skips irrelevant _____ during query execution, improving performance 5-10x.',
    answer: 'partitions',
    topicId: 'partitioning_sharding',
    hint: 'Partition pruning optimization',
  ),
  FillBlankQuestion(
    id: 'dfb_037e',
    statement: '_____ scaling means adding more servers instead of bigger servers.',
    answer: 'Horizontal',
    topicId: 'partitioning_sharding',
    hint: 'Scale out, not scale up',
  ),
  FillBlankQuestion(
    id: 'dfb_037f',
    statement: 'Each _____ holds a subset of data on a different database server.',
    answer: 'shard',
    topicId: 'partitioning_sharding',
    hint: 'Data piece on separate server',
  ),
  FillBlankQuestion(
    id: 'dfb_037g',
    statement: '_____ is reorganizing shards when adding or removing servers as data grows.',
    answer: 'Resharding',
    topicId: 'partitioning_sharding',
    hint: 'Reorganizing shard distribution',
  ),
  FillBlankQuestion(
    id: 'dfb_037h',
    statement: '_____ joins are challenging in sharding because data is on different servers.',
    answer: 'Cross-shard',
    topicId: 'partitioning_sharding',
    hint: 'Joining data across shards',
  ),
  FillBlankQuestion(
    id: 'dfb_037i',
    statement: '_____ is a tool used by YouTube to automate MySQL sharding.',
    answer: 'Vitess',
    topicId: 'partitioning_sharding',
    hint: 'MySQL sharding automation tool',
  ),
  FillBlankQuestion(
    id: 'dfb_037j',
    statement: 'Partitioning improves query _____ by scanning only relevant data subsets.',
    answer: 'performance',
    topicId: 'partitioning_sharding',
    hint: 'Speed and efficiency benefit',
  ),
  FillBlankQuestion(
    id: 'dfb_037k',
    statement: 'Partitioning operates within a single _____, while sharding uses multiple.',
    answer: 'server',
    topicId: 'partitioning_sharding',
    hint: 'Database instance or machine',
  ),
  FillBlankQuestion(
    id: 'dfb_037l',
    statement: 'Shard _____ logic determines which shard to query based on the key.',
    answer: 'routing',
    topicId: 'partitioning_sharding',
    hint: 'Directing queries to correct shard',
  ),
  FillBlankQuestion(
    id: 'dfb_037m',
    statement: '_____ sharding distributes data based on geographic location for low latency.',
    answer: 'Geo',
    topicId: 'partitioning_sharding',
    hint: 'Geographic or location-based',
  ),
  FillBlankQuestion(
    id: 'dfb_037n',
    statement: 'Data _____ moves data evenly between shards to prevent hotspots.',
    answer: 'rebalancing',
    topicId: 'partitioning_sharding',
    hint: 'Equalizing data distribution',
  ),
  FillBlankQuestion(
    id: 'dfb_037o',
    statement: 'Horizontal _____ is the key benefit of sharding for growing databases.',
    answer: 'scalability',
    topicId: 'partitioning_sharding',
    hint: 'Ability to grow with more servers',
  ),
  
  // Query Profiling & Optimization
  FillBlankQuestion(
    id: 'dfb_038',
    statement: '_____ analyzes how a SQL query executes internally to identify bottlenecks.',
    answer: 'Profiling',
    topicId: 'query_profiling',
    hint: 'Diagnosing query performance',
  ),
  FillBlankQuestion(
    id: 'dfb_038a',
    statement: '_____ shows the query execution plan including table scan type and index usage.',
    answer: 'EXPLAIN',
    topicId: 'query_profiling',
    hint: 'MySQL/PostgreSQL tool for viewing plans',
  ),
  FillBlankQuestion(
    id: 'dfb_038b',
    statement: 'Full table _____ (type=ALL) scans every row and is very slow for large tables.',
    answer: 'scan',
    topicId: 'query_profiling',
    hint: 'Reading all rows in table',
  ),
  FillBlankQuestion(
    id: 'dfb_038c',
    statement: '_____ indexes include all columns needed by query, enabling index-only scans.',
    answer: 'Covering',
    topicId: 'query_profiling',
    hint: 'Index that covers all query needs',
  ),
  FillBlankQuestion(
    id: 'dfb_038d',
    statement: 'Avoid SELECT _____ as it fetches unnecessary data and increases I/O.',
    answer: '*',
    topicId: 'query_profiling',
    hint: 'Wildcard selector',
  ),
  FillBlankQuestion(
    id: 'dfb_038e',
    statement: 'Use _____ instead of subqueries for better performance as it stops at first match.',
    answer: 'EXISTS',
    topicId: 'query_profiling',
    hint: 'Efficient existence check',
  ),
  FillBlankQuestion(
    id: 'dfb_038f',
    statement: '_____ TABLE updates statistics for better query optimizer decisions.',
    answer: 'ANALYZE',
    topicId: 'query_profiling',
    hint: 'Command to refresh table statistics',
  ),
  FillBlankQuestion(
    id: 'dfb_038g',
    statement: 'Slow query _____ detects queries exceeding a time threshold like 2 seconds.',
    answer: 'log',
    topicId: 'query_profiling',
    hint: 'File that records slow queries',
  ),
  FillBlankQuestion(
    id: 'dfb_038h',
    statement: '_____ (WITH clause) improves readability and allows optimizer to cache results.',
    answer: 'CTE',
    topicId: 'query_profiling',
    hint: 'Common Table Expression',
  ),
  FillBlankQuestion(
    id: 'dfb_038i',
    statement: 'Use _____ with pagination to prevent over-fetching large datasets.',
    answer: 'LIMIT',
    topicId: 'query_profiling',
    hint: 'SQL clause to restrict row count',
  ),
  FillBlankQuestion(
    id: 'dfb_038j',
    statement: 'Avoid functions on _____ columns like WHERE YEAR(date)=2024 as it prevents index usage.',
    answer: 'indexed',
    topicId: 'query_profiling',
    hint: 'Columns with indexes',
  ),
  FillBlankQuestion(
    id: 'dfb_038k',
    statement: 'Composite _____ cover multiple columns like (customer_id, order_date).',
    answer: 'indexes',
    topicId: 'query_profiling',
    hint: 'Multi-column indexes',
  ),
  FillBlankQuestion(
    id: 'dfb_038l',
    statement: 'EXPLAIN _____ in PostgreSQL provides actual execution time, not just estimates.',
    answer: 'ANALYZE',
    topicId: 'query_profiling',
    hint: 'Run query and show real timing',
  ),
  FillBlankQuestion(
    id: 'dfb_038m',
    statement: 'pg_stat_statements tracks query _____ and execution time in PostgreSQL.',
    answer: 'statistics',
    topicId: 'query_profiling',
    hint: 'Performance metrics',
  ),
  FillBlankQuestion(
    id: 'dfb_038n',
    statement: 'Proper _____ has the biggest performance impact (10-1000x improvement).',
    answer: 'indexing',
    topicId: 'query_profiling',
    hint: 'Creating indexes on columns',
  ),
  FillBlankQuestion(
    id: 'dfb_038o',
    statement: 'Filter _____ with WHERE before JOIN to reduce rows processed.',
    answer: 'early',
    topicId: 'query_profiling',
    hint: 'Before joining tables',
  ),
  
  // Distributed Databases
  FillBlankQuestion(
    id: 'dfb_039',
    statement: 'A _____ database stores data across multiple physical locations appearing as single logical database.',
    answer: 'distributed',
    topicId: 'distributed_db',
    hint: 'Spread across multiple sites',
  ),
  FillBlankQuestion(
    id: 'dfb_039a',
    statement: '_____ manages data distribution, consistency, and coordination across all database sites.',
    answer: 'DDBMS',
    topicId: 'distributed_db',
    hint: 'Distributed Database Management System',
  ),
  FillBlankQuestion(
    id: 'dfb_039b',
    statement: 'Horizontal _____ divides table rows across nodes, also known as sharding.',
    answer: 'fragmentation',
    topicId: 'distributed_db',
    hint: 'Splitting data into pieces',
  ),
  FillBlankQuestion(
    id: 'dfb_039c',
    statement: '_____ creates copies of same data at multiple sites for availability and fault tolerance.',
    answer: 'Replication',
    topicId: 'distributed_db',
    hint: 'Duplicating data across nodes',
  ),
  FillBlankQuestion(
    id: 'dfb_039d',
    statement: 'Two-Phase _____ (2PC) ensures atomicity in distributed transactions.',
    answer: 'Commit',
    topicId: 'distributed_db',
    hint: 'Protocol with prepare and commit phases',
  ),
  FillBlankQuestion(
    id: 'dfb_039e',
    statement: '_____ transparency means users see single database unaware of data distribution.',
    answer: 'Location',
    topicId: 'distributed_db',
    hint: 'Hiding physical location',
  ),
  FillBlankQuestion(
    id: 'dfb_039f',
    statement: 'Strong _____ means all nodes see same data instantly after update.',
    answer: 'consistency',
    topicId: 'distributed_db',
    hint: 'Data synchronization across nodes',
  ),
  FillBlankQuestion(
    id: 'dfb_039g',
    statement: '_____ consistency means updates propagate over time with temporary divergence.',
    answer: 'Eventual',
    topicId: 'distributed_db',
    hint: 'Updates sync gradually',
  ),
  FillBlankQuestion(
    id: 'dfb_039h',
    statement: 'CAP theorem states you can only guarantee 2 of 3: Consistency, Availability, and Partition _____.',
    answer: 'Tolerance',
    topicId: 'distributed_db',
    hint: 'System continues despite network failures',
  ),
  FillBlankQuestion(
    id: 'dfb_039i',
    statement: 'Vertical fragmentation divides table _____ across nodes.',
    answer: 'columns',
    topicId: 'distributed_db',
    hint: 'Not rows, but fields',
  ),
  FillBlankQuestion(
    id: 'dfb_039j',
    statement: '_____ queries are decomposed into subqueries sent to relevant nodes, then results merged.',
    answer: 'Distributed',
    topicId: 'distributed_db',
    hint: 'Queries across multiple sites',
  ),
  FillBlankQuestion(
    id: 'dfb_039k',
    statement: 'Concurrency control using _____ prevents simultaneous conflicting updates.',
    answer: 'locking',
    topicId: 'distributed_db',
    hint: 'Acquiring exclusive access',
  ),
  FillBlankQuestion(
    id: 'dfb_039l',
    statement: '_____ consensus requires majority of nodes to agree for consistency.',
    answer: 'Quorum',
    topicId: 'distributed_db',
    hint: 'Majority voting mechanism',
  ),
  FillBlankQuestion(
    id: 'dfb_039m',
    statement: 'Fault _____ means node failure does not stop the entire system.',
    answer: 'tolerance',
    topicId: 'distributed_db',
    hint: 'Resilience to failures',
  ),
  FillBlankQuestion(
    id: 'dfb_039n',
    statement: 'Geographic _____ places data near users to reduce latency and comply with regulations.',
    answer: 'distribution',
    topicId: 'distributed_db',
    hint: 'Spreading data across regions',
  ),
  FillBlankQuestion(
    id: 'dfb_039o',
    statement: '_____ replication copies entire database to every node for high availability.',
    answer: 'Full',
    topicId: 'distributed_db',
    hint: 'Complete copy, not partial',
  ),

  // CAP Theorem & Consistency Models
  FillBlankQuestion(
    id: 'dfb_040',
    statement: 'The _____ theorem states that distributed systems can guarantee only 2 of 3 properties.',
    answer: 'CAP',
    topicId: 'cap_theorem',
    hint: 'Consistency, Availability, Partition Tolerance',
  ),
  FillBlankQuestion(
    id: 'dfb_040a',
    statement: '_____ means all nodes see the same data at the same time in a distributed system.',
    answer: 'Consistency',
    topicId: 'cap_theorem',
    hint: 'First property of CAP',
  ),
  FillBlankQuestion(
    id: 'dfb_040b',
    statement: '_____ ensures every request receives a response, even if some nodes fail.',
    answer: 'Availability',
    topicId: 'cap_theorem',
    hint: 'Second property of CAP, system never refuses',
  ),
  FillBlankQuestion(
    id: 'dfb_040c',
    statement: 'Partition _____ means the system continues to operate despite network failures.',
    answer: 'Tolerance',
    topicId: 'cap_theorem',
    hint: 'Third property of CAP, handles network splits',
  ),
  FillBlankQuestion(
    id: 'dfb_040d',
    statement: 'According to CAP theorem, you can only guarantee _____ out of three properties simultaneously.',
    answer: 'two',
    topicId: 'cap_theorem',
    hint: 'Number between 1 and 3',
  ),
  FillBlankQuestion(
    id: 'dfb_040e',
    statement: '_____ systems prioritize Consistency and Partition Tolerance, may reject requests during partition.',
    answer: 'CP',
    topicId: 'cap_theorem',
    hint: 'Google Spanner, HBase, MongoDB strict mode',
  ),
  FillBlankQuestion(
    id: 'dfb_040f',
    statement: '_____ systems prioritize Availability and Partition Tolerance, always respond but may serve stale data.',
    answer: 'AP',
    topicId: 'cap_theorem',
    hint: 'Cassandra, DynamoDB, CouchDB',
  ),
  FillBlankQuestion(
    id: 'dfb_040g',
    statement: '_____ consistency means updates propagate over time and nodes eventually converge to same state.',
    answer: 'Eventual',
    topicId: 'cap_theorem',
    hint: 'Used in AP systems, temporary inconsistencies OK',
  ),
  FillBlankQuestion(
    id: 'dfb_040h',
    statement: '_____ consistency guarantees every read reflects the most recent write immediately.',
    answer: 'Strong',
    topicId: 'cap_theorem',
    hint: 'Linearizability, used in CP systems',
  ),
  FillBlankQuestion(
    id: 'dfb_040i',
    statement: '_____ stands for Basically Available, Soft-state, Eventually consistent.',
    answer: 'BASE',
    topicId: 'cap_theorem',
    hint: 'Alternative to ACID for distributed systems',
  ),
  FillBlankQuestion(
    id: 'dfb_040j',
    statement: '_____ is the traditional database model emphasizing consistency: Atomicity, Consistency, Isolation, Durability.',
    answer: 'ACID',
    topicId: 'cap_theorem',
    hint: 'MySQL, PostgreSQL, Oracle transactions',
  ),
  FillBlankQuestion(
    id: 'dfb_040k',
    statement: 'Cassandra uses _____ consistency, allowing configuration of consistency level per query.',
    answer: 'tunable',
    topicId: 'cap_theorem',
    hint: 'ONE, QUORUM, ALL levels',
  ),
  FillBlankQuestion(
    id: 'dfb_040l',
    statement: 'In eventual consistency, updates _____ asynchronously and all nodes eventually agree.',
    answer: 'propagate',
    topicId: 'cap_theorem',
    hint: 'Spread or replicate across nodes',
  ),
  FillBlankQuestion(
    id: 'dfb_040m',
    statement: 'A network _____ occurs when communication between nodes is lost, splitting the system.',
    answer: 'partition',
    topicId: 'cap_theorem',
    hint: 'Network failure or split isolation',
  ),
  FillBlankQuestion(
    id: 'dfb_040n',
    statement: 'Google Spanner is a _____ system using TrueTime API for strong global consistency.',
    answer: 'CP',
    topicId: 'cap_theorem',
    hint: 'Consistency + Partition Tolerance',
  ),
  FillBlankQuestion(
    id: 'dfb_040o',
    statement: 'The fundamental _____ in CAP is between always correct (consistency) and always online (availability).',
    answer: 'trade-off',
    topicId: 'cap_theorem',
    hint: 'Balancing decision or compromise',
  ),
  
  // Java Modules and Packages
  FillBlankQuestion(
    id: 'jfb_043',
    statement: 'The _____ keyword is used to make package contents accessible to other modules.',
    answer: 'exports',
    topicId: 'java_modules_packages',
    hint: 'Used in module-info.java to expose packages',
  ),
  FillBlankQuestion(
    id: 'jfb_043a',
    statement: 'The _____ keyword is used to declare a module dependency.',
    answer: 'requires',
    topicId: 'java_modules_packages',
    hint: 'Opposite of exports',
  ),
  FillBlankQuestion(
    id: 'jfb_043b',
    statement: 'Modules were introduced in Java _____.',
    answer: '9',
    topicId: 'java_modules_packages',
    hint: 'The version number',
  ),
  FillBlankQuestion(
    id: 'jfb_043c',
    statement: 'The file _____ defines module structure and dependencies.',
    answer: 'module-info.java',
    topicId: 'java_modules_packages',
    hint: 'Special Java file for modules',
  ),
  FillBlankQuestion(
    id: 'jfb_043d',
    statement: 'Packages are _____ organizational units while modules are runtime units.',
    answer: 'compile-time',
    topicId: 'java_modules_packages',
    hint: 'When packages are resolved',
  ),
  FillBlankQuestion(
    id: 'jfb_043e',
    statement: 'The _____ access modifier allows access only within the same class.',
    answer: 'private',
    topicId: 'java_modules_packages',
    hint: 'Most restrictive modifier',
  ),
  FillBlankQuestion(
    id: 'jfb_043f',
    statement: 'The _____ access modifier allows access everywhere.',
    answer: 'public',
    topicId: 'java_modules_packages',
    hint: 'Least restrictive modifier',
  ),
  FillBlankQuestion(
    id: 'jfb_043g',
    statement: 'Package names follow _____ domain name convention.',
    answer: 'reverse',
    topicId: 'java_modules_packages',
    hint: 'com.company.project format',
  ),
  FillBlankQuestion(
    id: 'jfb_043h',
    statement: 'The _____ access modifier allows access in same package and subclasses.',
    answer: 'protected',
    topicId: 'java_modules_packages',
    hint: 'Between public and default',
  ),
  FillBlankQuestion(
    id: 'jfb_043i',
    statement: 'Packages organize classes into _____ and avoid naming conflicts.',
    answer: 'namespaces',
    topicId: 'java_modules_packages',
    hint: 'Logical grouping of classes',
  ),
  FillBlankQuestion(
    id: 'jfb_043j',
    statement: 'The _____ keyword in module dependencies propagates the dependency to consumers.',
    answer: 'transitive',
    topicId: 'java_modules_packages',
    hint: 'Makes dependency available transitively',
  ),
  FillBlankQuestion(
    id: 'jfb_043k',
    statement: 'When no access modifier is specified, it is called _____ access.',
    answer: 'default',
    topicId: 'java_modules_packages',
    hint: 'Package-private access',
  ),
  FillBlankQuestion(
    id: 'jfb_043l',
    statement: 'Modules provide _____ encapsulation by controlling which packages are exposed.',
    answer: 'strong',
    topicId: 'java_modules_packages',
    hint: 'Better than weak',
  ),
  FillBlankQuestion(
    id: 'jfb_043m',
    statement: 'The _____ keyword allows reflection access to a package in modules.',
    answer: 'opens',
    topicId: 'java_modules_packages',
    hint: 'Opens package for reflective access',
  ),
  FillBlankQuestion(
    id: 'jfb_043n',
    statement: 'To compile a module, use javac with the _____ flag to specify output directory.',
    answer: '-d',
    topicId: 'java_modules_packages',
    hint: 'Directory output flag',
  ),
  FillBlankQuestion(
    id: 'jfb_043o',
    statement: 'The _____ import allows direct use of static members without class name.',
    answer: 'static',
    topicId: 'java_modules_packages',
    hint: 'import static java.lang.Math.PI',
  ),
  // JavaFX and GUI Development
  FillBlankQuestion(
    id: 'jfb_044',
    statement: 'JavaFX is a modern library for building rich _____ applications.',
    answer: 'GUI',
    topicId: 'java_javafx_gui',
    hint: 'Graphical User Interface',
  ),
  FillBlankQuestion(
    id: 'jfb_044a',
    statement: 'JavaFX replaces _____ in modern Java applications.',
    answer: 'Swing',
    topicId: 'java_javafx_gui',
    hint: 'Older GUI framework',
  ),
  FillBlankQuestion(
    id: 'jfb_044b',
    statement: 'FXML allows _____ UI design in JavaFX.',
    answer: 'declarative',
    topicId: 'java_javafx_gui',
    hint: 'Like HTML for JavaFX',
  ),
  FillBlankQuestion(
    id: 'jfb_044c',
    statement: 'The _____ is the main window of a JavaFX application.',
    answer: 'Stage',
    topicId: 'java_javafx_gui',
    hint: 'Primary window class',
  ),
  FillBlankQuestion(
    id: 'jfb_044d',
    statement: 'The _____ is the container for all UI elements in JavaFX.',
    answer: 'Scene',
    topicId: 'java_javafx_gui',
    hint: 'Contains nodes and controls',
  ),
  FillBlankQuestion(
    id: 'jfb_044e',
    statement: '_____ is the base class for all UI controls in JavaFX.',
    answer: 'Node',
    topicId: 'java_javafx_gui',
    hint: 'Base class for buttons, labels, etc.',
  ),
  FillBlankQuestion(
    id: 'jfb_044f',
    statement: '_____ arranges nodes vertically in JavaFX.',
    answer: 'VBox',
    topicId: 'java_javafx_gui',
    hint: 'Vertical Box layout',
  ),
  FillBlankQuestion(
    id: 'jfb_044g',
    statement: '_____ arranges nodes horizontally in JavaFX.',
    answer: 'HBox',
    topicId: 'java_javafx_gui',
    hint: 'Horizontal Box layout',
  ),
  FillBlankQuestion(
    id: 'jfb_044h',
    statement: '_____ has top, bottom, left, right, and center regions.',
    answer: 'BorderPane',
    topicId: 'java_javafx_gui',
    hint: 'Five-region layout',
  ),
  FillBlankQuestion(
    id: 'jfb_044i',
    statement: '_____ uses row and column grid layout in JavaFX.',
    answer: 'GridPane',
    topicId: 'java_javafx_gui',
    hint: 'Grid-based layout',
  ),
  FillBlankQuestion(
    id: 'jfb_044j',
    statement: 'The _____ class is used to load FXML files.',
    answer: 'FXMLLoader',
    topicId: 'java_javafx_gui',
    hint: 'Loads declarative UI files',
  ),
  FillBlankQuestion(
    id: 'jfb_044k',
    statement: 'JavaFX applications must extend the _____ class.',
    answer: 'Application',
    topicId: 'java_javafx_gui',
    hint: 'Main JavaFX application class',
  ),
  FillBlankQuestion(
    id: 'jfb_044l',
    statement: 'The _____ method must be overridden to start a JavaFX application.',
    answer: 'start',
    topicId: 'java_javafx_gui',
    hint: 'start(Stage primaryStage)',
  ),
  FillBlankQuestion(
    id: 'jfb_044m',
    statement: '_____ can be used to style JavaFX applications.',
    answer: 'CSS',
    topicId: 'java_javafx_gui',
    hint: 'Cascading Style Sheets',
  ),
  FillBlankQuestion(
    id: 'jfb_044n',
    statement: '_____ is used for multi-line text input in JavaFX.',
    answer: 'TextArea',
    topicId: 'java_javafx_gui',
    hint: 'Multi-line input control',
  ),
  FillBlankQuestion(
    id: 'jfb_044o',
    statement: '_____ displays tabular data in JavaFX.',
    answer: 'TableView',
    topicId: 'java_javafx_gui',
    hint: 'Table display control',
  ),
  // Networking and Socket Programming
  FillBlankQuestion(
    id: 'jfb_045',
    statement: 'The _____ package provides networking support in Java.',
    answer: 'java.net',
    topicId: 'java_networking',
    hint: 'Package for networking classes',
  ),
  FillBlankQuestion(
    id: 'jfb_045a',
    statement: '_____ is a connection-oriented and reliable protocol.',
    answer: 'TCP',
    topicId: 'java_networking',
    hint: 'Transmission Control Protocol',
  ),
  FillBlankQuestion(
    id: 'jfb_045b',
    statement: '_____ is a connectionless and unreliable protocol.',
    answer: 'UDP',
    topicId: 'java_networking',
    hint: 'User Datagram Protocol',
  ),
  FillBlankQuestion(
    id: 'jfb_045c',
    statement: 'The _____ class is used for TCP server communication.',
    answer: 'ServerSocket',
    topicId: 'java_networking',
    hint: 'Accepts client connections',
  ),
  FillBlankQuestion(
    id: 'jfb_045d',
    statement: 'The _____ class is used for TCP client communication.',
    answer: 'Socket',
    topicId: 'java_networking',
    hint: 'Connects to server',
  ),
  FillBlankQuestion(
    id: 'jfb_045e',
    statement: 'The _____ class is used for UDP communication.',
    answer: 'DatagramSocket',
    topicId: 'java_networking',
    hint: 'UDP socket class',
  ),
  FillBlankQuestion(
    id: 'jfb_045f',
    statement: 'The _____ class represents UDP data packets.',
    answer: 'DatagramPacket',
    topicId: 'java_networking',
    hint: 'UDP packet class',
  ),
  FillBlankQuestion(
    id: 'jfb_045g',
    statement: 'The _____ class represents IP addresses and hostnames.',
    answer: 'InetAddress',
    topicId: 'java_networking',
    hint: 'Internet address class',
  ),
  FillBlankQuestion(
    id: 'jfb_045h',
    statement: 'The _____ method in ServerSocket accepts client connections.',
    answer: 'accept',
    topicId: 'java_networking',
    hint: 'Blocking method that waits for clients',
  ),
  FillBlankQuestion(
    id: 'jfb_045i',
    statement: 'TCP guarantees _____ of delivery.',
    answer: 'order',
    topicId: 'java_networking',
    hint: 'Packets arrive in sequence',
  ),
  FillBlankQuestion(
    id: 'jfb_045j',
    statement: 'UDP is _____ than TCP but does not guarantee delivery.',
    answer: 'faster',
    topicId: 'java_networking',
    hint: 'Performance comparison',
  ),
  FillBlankQuestion(
    id: 'jfb_045k',
    statement: 'The _____ class represents Uniform Resource Locators.',
    answer: 'URL',
    topicId: 'java_networking',
    hint: 'Web address class',
  ),
  FillBlankQuestion(
    id: 'jfb_045l',
    statement: '_____ connects to URLs and handles HTTP requests.',
    answer: 'URLConnection',
    topicId: 'java_networking',
    hint: 'Connection to web resources',
  ),
  FillBlankQuestion(
    id: 'jfb_045m',
    statement: 'Use _____ to automatically close network resources.',
    answer: 'try-with-resources',
    topicId: 'java_networking',
    hint: 'Automatic resource management',
  ),
  FillBlankQuestion(
    id: 'jfb_045n',
    statement: 'Sockets are _____ for communication between client and server.',
    answer: 'endpoints',
    topicId: 'java_networking',
    hint: 'Communication endpoints',
  ),
  FillBlankQuestion(
    id: 'jfb_045o',
    statement: '_____ handles HTTP-specific operations in Java networking.',
    answer: 'HttpURLConnection',
    topicId: 'java_networking',
    hint: 'HTTP connection class',
  ),
  // Serialization and Deserialization
  FillBlankQuestion(
    id: 'jfb_046',
    statement: '_____ converts Java objects into byte streams.',
    answer: 'Serialization',
    topicId: 'java_serialization',
    hint: 'Process of converting objects to bytes',
  ),
  FillBlankQuestion(
    id: 'jfb_046a',
    statement: '_____ reconstructs objects from byte streams.',
    answer: 'Deserialization',
    topicId: 'java_serialization',
    hint: 'Opposite of serialization',
  ),
  FillBlankQuestion(
    id: 'jfb_046b',
    statement: 'Classes must implement the _____ interface to be serialized.',
    answer: 'Serializable',
    topicId: 'java_serialization',
    hint: 'Marker interface for serialization',
  ),
  FillBlankQuestion(
    id: 'jfb_046c',
    statement: 'The _____ keyword prevents a field from being serialized.',
    answer: 'transient',
    topicId: 'java_serialization',
    hint: 'Marks fields to skip during serialization',
  ),
  FillBlankQuestion(
    id: 'jfb_046d',
    statement: '_____ is used to serialize objects to output streams.',
    answer: 'ObjectOutputStream',
    topicId: 'java_serialization',
    hint: 'Output stream for objects',
  ),
  FillBlankQuestion(
    id: 'jfb_046e',
    statement: '_____ is used to deserialize objects from input streams.',
    answer: 'ObjectInputStream',
    topicId: 'java_serialization',
    hint: 'Input stream for objects',
  ),
  FillBlankQuestion(
    id: 'jfb_046f',
    statement: '_____ ensures version compatibility during deserialization.',
    answer: 'serialVersionUID',
    topicId: 'java_serialization',
    hint: 'Version control field',
  ),
  FillBlankQuestion(
    id: 'jfb_046g',
    statement: '_____ fields are not serialized.',
    answer: 'Static',
    topicId: 'java_serialization',
    hint: 'Class-level fields',
  ),
  FillBlankQuestion(
    id: 'jfb_046h',
    statement: 'The _____ interface provides full control over serialization.',
    answer: 'Externalizable',
    topicId: 'java_serialization',
    hint: 'Manual serialization interface',
  ),
  FillBlankQuestion(
    id: 'jfb_046i',
    statement: 'Externalizable requires a _____ constructor.',
    answer: 'no-arg',
    topicId: 'java_serialization',
    hint: 'Default constructor',
  ),
  FillBlankQuestion(
    id: 'jfb_046j',
    statement: 'Serializable is a _____ interface with no methods.',
    answer: 'marker',
    topicId: 'java_serialization',
    hint: 'Interface type with no methods',
  ),
  FillBlankQuestion(
    id: 'jfb_046k',
    statement: 'Custom serialization uses the _____ method.',
    answer: 'writeObject',
    topicId: 'java_serialization',
    hint: 'Private method for custom serialization',
  ),
  FillBlankQuestion(
    id: 'jfb_046l',
    statement: 'Custom deserialization uses the _____ method.',
    answer: 'readObject',
    topicId: 'java_serialization',
    hint: 'Private method for custom deserialization',
  ),
  FillBlankQuestion(
    id: 'jfb_046m',
    statement: 'Deserialization throws _____ if the class is not found.',
    answer: 'ClassNotFoundException',
    topicId: 'java_serialization',
    hint: 'Exception when class definition is missing',
  ),
  FillBlankQuestion(
    id: 'jfb_046n',
    statement: 'Transient fields are set to _____ after deserialization.',
    answer: 'null',
    topicId: 'java_serialization',
    hint: 'Default value for objects',
  ),
  FillBlankQuestion(
    id: 'jfb_046o',
    statement: 'Not defining serialVersionUID can cause _____.',
    answer: 'InvalidClassException',
    topicId: 'java_serialization',
    hint: 'Exception for version mismatch',
  ),
  // JVM Architecture and Performance
  FillBlankQuestion(
    id: 'jfb_047',
    statement: 'JVM stands for Java _____ Machine.',
    answer: 'Virtual',
    topicId: 'java_jvm_performance',
    hint: 'Abstract computing machine',
  ),
  FillBlankQuestion(
    id: 'jfb_047a',
    statement: 'The _____ compiler converts hot methods to native code at runtime.',
    answer: 'JIT',
    topicId: 'java_jvm_performance',
    hint: 'Just-In-Time',
  ),
  FillBlankQuestion(
    id: 'jfb_047b',
    statement: 'The _____ memory area stores objects and arrays.',
    answer: 'Heap',
    topicId: 'java_jvm_performance',
    hint: 'GC-managed memory',
  ),
  FillBlankQuestion(
    id: 'jfb_047c',
    statement: 'The _____ memory area stores method call frames and local variables.',
    answer: 'Stack',
    topicId: 'java_jvm_performance',
    hint: 'Per-thread memory',
  ),
  FillBlankQuestion(
    id: 'jfb_047d',
    statement: 'The _____ loads .class files into JVM memory.',
    answer: 'Class Loader',
    topicId: 'java_jvm_performance',
    hint: 'Loads bytecode',
  ),
  FillBlankQuestion(
    id: 'jfb_047e',
    statement: '_____ Area stores class-level data and static variables.',
    answer: 'Method',
    topicId: 'java_jvm_performance',
    hint: 'Class metadata storage',
  ),
  FillBlankQuestion(
    id: 'jfb_047f',
    statement: '_____ GC cleans the Young Generation.',
    answer: 'Minor',
    topicId: 'java_jvm_performance',
    hint: 'Frequent, fast GC',
  ),
  FillBlankQuestion(
    id: 'jfb_047g',
    statement: '_____ GC cleans the Old Generation.',
    answer: 'Major',
    topicId: 'java_jvm_performance',
    hint: 'Infrequent, slower GC',
  ),
  FillBlankQuestion(
    id: 'jfb_047h',
    statement: '_____ GC is recommended for large heaps and low pause times.',
    answer: 'G1',
    topicId: 'java_jvm_performance',
    hint: 'Garbage First',
  ),
  FillBlankQuestion(
    id: 'jfb_047i',
    statement: 'The _____ option sets the maximum heap size.',
    answer: '-Xmx',
    topicId: 'java_jvm_performance',
    hint: 'JVM memory option',
  ),
  FillBlankQuestion(
    id: 'jfb_047j',
    statement: 'The _____ option sets the initial heap size.',
    answer: '-Xms',
    topicId: 'java_jvm_performance',
    hint: 'Starting heap size option',
  ),
  FillBlankQuestion(
    id: 'jfb_047k',
    statement: 'The _____ tracks the current instruction for each thread.',
    answer: 'PC Register',
    topicId: 'java_jvm_performance',
    hint: 'Program Counter',
  ),
  FillBlankQuestion(
    id: 'jfb_047l',
    statement: 'The Execution Engine contains Interpreter, JIT, and _____.',
    answer: 'Garbage Collector',
    topicId: 'java_jvm_performance',
    hint: 'Automatic memory management',
  ),
  FillBlankQuestion(
    id: 'jfb_047m',
    statement: '_____ GC is single-threaded for small applications.',
    answer: 'Serial',
    topicId: 'java_jvm_performance',
    hint: 'Simple, single-thread GC',
  ),
  FillBlankQuestion(
    id: 'jfb_047n',
    statement: '_____ is a tool used to monitor JVM memory and threads.',
    answer: 'jconsole',
    topicId: 'java_jvm_performance',
    hint: 'JVM monitoring tool',
  ),
  FillBlankQuestion(
    id: 'jfb_047o',
    statement: 'New objects are created in the _____ space of Young Generation.',
    answer: 'Eden',
    topicId: 'java_jvm_performance',
    hint: 'Birth place of objects',
  ),
  // Java Security and Access Modifiers
  FillBlankQuestion(
    id: 'jfb_048',
    statement: 'The _____ access modifier makes a member accessible only within its class.',
    answer: 'private',
    topicId: 'java_security',
    hint: 'Most restrictive modifier',
  ),
  FillBlankQuestion(
    id: 'jfb_048a',
    statement: 'The _____ access modifier makes a member accessible everywhere.',
    answer: 'public',
    topicId: 'java_security',
    hint: 'Least restrictive modifier',
  ),
  FillBlankQuestion(
    id: 'jfb_048b',
    statement: 'The _____ access modifier is accessible in same package and subclasses.',
    answer: 'protected',
    topicId: 'java_security',
    hint: 'Between public and default',
  ),
  FillBlankQuestion(
    id: 'jfb_048c',
    statement: 'When no modifier is specified, it is called _____ access.',
    answer: 'default',
    topicId: 'java_security',
    hint: 'Package-private access',
  ),
  FillBlankQuestion(
    id: 'jfb_048d',
    statement: 'The _____ enforces runtime access control in Java.',
    answer: 'Security Manager',
    topicId: 'java_security',
    hint: 'Runtime security component',
  ),
  FillBlankQuestion(
    id: 'jfb_048e',
    statement: '_____ is a symmetric encryption algorithm.',
    answer: 'AES',
    topicId: 'java_security',
    hint: 'Advanced Encryption Standard',
  ),
  FillBlankQuestion(
    id: 'jfb_048f',
    statement: '_____ is an asymmetric encryption algorithm.',
    answer: 'RSA',
    topicId: 'java_security',
    hint: 'Public-private key encryption',
  ),
  FillBlankQuestion(
    id: 'jfb_048g',
    statement: '_____ stands for Java Authentication and Authorization Service.',
    answer: 'JAAS',
    topicId: 'java_security',
    hint: 'User authentication service',
  ),
  FillBlankQuestion(
    id: 'jfb_048h',
    statement: '_____ signatures ensure data integrity and authentication.',
    answer: 'Digital',
    topicId: 'java_security',
    hint: 'Cryptographic verification',
  ),
  FillBlankQuestion(
    id: 'jfb_048i',
    statement: '_____ is used for generating message digests and hashing.',
    answer: 'MessageDigest',
    topicId: 'java_security',
    hint: 'Hashing class',
  ),
  FillBlankQuestion(
    id: 'jfb_048j',
    statement: '_____ should be used instead of Random for cryptographic operations.',
    answer: 'SecureRandom',
    topicId: 'java_security',
    hint: 'Cryptographically strong random',
  ),
  FillBlankQuestion(
    id: 'jfb_048k',
    statement: 'Access modifiers enforce _____ at compile-time.',
    answer: 'encapsulation',
    topicId: 'java_security',
    hint: 'Data hiding principle',
  ),
  FillBlankQuestion(
    id: 'jfb_048l',
    statement: 'Always use _____ fields with public getters and setters.',
    answer: 'private',
    topicId: 'java_security',
    hint: 'Best practice for encapsulation',
  ),
  FillBlankQuestion(
    id: 'jfb_048m',
    statement: 'The _____ API provides encryption and decryption in Java.',
    answer: 'Cryptography',
    topicId: 'java_security',
    hint: 'JCA - Java Cryptography API',
  ),
  FillBlankQuestion(
    id: 'jfb_048n',
    statement: '_____ classes are thread-safe and secure by design.',
    answer: 'Immutable',
    topicId: 'java_security',
    hint: 'Cannot be modified after creation',
  ),
  FillBlankQuestion(
    id: 'jfb_048o',
    statement: 'Use _____ modifier for API methods and public interfaces.',
    answer: 'public',
    topicId: 'java_security',
    hint: 'External access modifier',
  ),
  // Unit Testing with JUnit & Mockito
  FillBlankQuestion(
    id: 'jfb_049',
    statement: '_____ is a popular Java testing framework for unit tests.',
    answer: 'JUnit',
    topicId: 'java_unit_testing',
    hint: 'Java testing framework',
  ),
  FillBlankQuestion(
    id: 'jfb_049a',
    statement: '_____ is a mocking framework for simulating dependencies.',
    answer: 'Mockito',
    topicId: 'java_unit_testing',
    hint: 'Mocking framework',
  ),
  FillBlankQuestion(
    id: 'jfb_049b',
    statement: 'The _____ annotation marks a method as a test method.',
    answer: '@Test',
    topicId: 'java_unit_testing',
    hint: 'Test method annotation',
  ),
  FillBlankQuestion(
    id: 'jfb_049c',
    statement: 'The _____ annotation runs before each test.',
    answer: '@BeforeEach',
    topicId: 'java_unit_testing',
    hint: 'Setup before each test',
  ),
  FillBlankQuestion(
    id: 'jfb_049d',
    statement: 'The _____ annotation runs after each test.',
    answer: '@AfterEach',
    topicId: 'java_unit_testing',
    hint: 'Cleanup after each test',
  ),
  FillBlankQuestion(
    id: 'jfb_049e',
    statement: 'The _____ annotation runs once before all tests.',
    answer: '@BeforeAll',
    topicId: 'java_unit_testing',
    hint: 'One-time setup',
  ),
  FillBlankQuestion(
    id: 'jfb_049f',
    statement: 'The _____ annotation skips a test.',
    answer: '@Disabled',
    topicId: 'java_unit_testing',
    hint: 'Skip test annotation',
  ),
  FillBlankQuestion(
    id: 'jfb_049g',
    statement: '_____ checks if two values are equal in assertions.',
    answer: 'assertEquals',
    topicId: 'java_unit_testing',
    hint: 'Equality assertion',
  ),
  FillBlankQuestion(
    id: 'jfb_049h',
    statement: '_____ checks if an expected exception is thrown.',
    answer: 'assertThrows',
    topicId: 'java_unit_testing',
    hint: 'Exception assertion',
  ),
  FillBlankQuestion(
    id: 'jfb_049i',
    statement: 'The _____ method creates a mock object in Mockito.',
    answer: 'mock',
    topicId: 'java_unit_testing',
    hint: 'Creates mock',
  ),
  FillBlankQuestion(
    id: 'jfb_049j',
    statement: '_____ defines the behavior of a mock object.',
    answer: 'when().thenReturn()',
    topicId: 'java_unit_testing',
    hint: 'Stubbing method',
  ),
  FillBlankQuestion(
    id: 'jfb_049k',
    statement: 'The _____ method verifies if a method was called.',
    answer: 'verify',
    topicId: 'java_unit_testing',
    hint: 'Verification method',
  ),
  FillBlankQuestion(
    id: 'jfb_049l',
    statement: '_____ simulates exceptions in void methods.',
    answer: 'doThrow',
    topicId: 'java_unit_testing',
    hint: 'Exception stubbing',
  ),
  FillBlankQuestion(
    id: 'jfb_049m',
    statement: 'Mocking _____ the unit under test from its dependencies.',
    answer: 'isolates',
    topicId: 'java_unit_testing',
    hint: 'Purpose of mocking',
  ),
  FillBlankQuestion(
    id: 'jfb_049n',
    statement: 'TDD stands for Test _____ Development.',
    answer: 'Driven',
    topicId: 'java_unit_testing',
    hint: 'Test-first approach',
  ),
  FillBlankQuestion(
    id: 'jfb_049o',
    statement: 'Unit testing ensures code _____ and early bug detection.',
    answer: 'correctness',
    topicId: 'java_unit_testing',
    hint: 'Quality assurance',
  ),

  // Build Tools: Maven and Gradle
  FillBlankQuestion(
    id: 'jfb_050',
    statement: 'Build tools automate compilation, _____ management, packaging, and deployment.',
    answer: 'dependency',
    topicId: 'java_build_tools',
    hint: 'Libraries and frameworks',
  ),
  FillBlankQuestion(
    id: 'jfb_050a',
    statement: 'Maven is a declarative build tool using _____ format.',
    answer: 'XML',
    topicId: 'java_build_tools',
    hint: 'Markup language',
  ),
  FillBlankQuestion(
    id: 'jfb_050b',
    statement: 'Gradle uses _____ or Kotlin DSL for build scripts.',
    answer: 'Groovy',
    topicId: 'java_build_tools',
    hint: 'JVM-based scripting language',
  ),
  FillBlankQuestion(
    id: 'jfb_050c',
    statement: 'Maven\'s core configuration file is _____.',
    answer: 'pom.xml',
    topicId: 'java_build_tools',
    hint: 'Project Object Model',
  ),
  FillBlankQuestion(
    id: 'jfb_050d',
    statement: 'The command "mvn _____" compiles the source code.',
    answer: 'compile',
    topicId: 'java_build_tools',
    hint: 'Build lifecycle phase',
  ),
  FillBlankQuestion(
    id: 'jfb_050e',
    statement: 'The Maven command "mvn _____" creates a JAR or WAR file.',
    answer: 'package',
    topicId: 'java_build_tools',
    hint: 'Bundle into archive',
  ),
  FillBlankQuestion(
    id: 'jfb_050f',
    statement: 'Maven downloads dependencies from _____ by default.',
    answer: 'Maven Central',
    topicId: 'java_build_tools',
    hint: 'Default repository',
  ),
  FillBlankQuestion(
    id: 'jfb_050g',
    statement: 'Gradle\'s build file is typically named _____.',
    answer: 'build.gradle',
    topicId: 'java_build_tools',
    hint: 'Groovy DSL file',
  ),
  FillBlankQuestion(
    id: 'jfb_050h',
    statement: 'The Gradle command "gradle _____" compiles, tests, and packages the project.',
    answer: 'build',
    topicId: 'java_build_tools',
    hint: 'Complete build lifecycle',
  ),
  FillBlankQuestion(
    id: 'jfb_050i',
    statement: 'Gradle supports _____ builds for better performance.',
    answer: 'incremental',
    topicId: 'java_build_tools',
    hint: 'Only rebuild changed parts',
  ),
  FillBlankQuestion(
    id: 'jfb_050j',
    statement: 'Maven is _____ -based, while Gradle is flexible and scriptable.',
    answer: 'convention',
    topicId: 'java_build_tools',
    hint: 'Standard project structure',
  ),
  FillBlankQuestion(
    id: 'jfb_050k',
    statement: 'Every Maven project must define groupId, artifactId, and _____.',
    answer: 'version',
    topicId: 'java_build_tools',
    hint: 'Project coordinates',
  ),
  FillBlankQuestion(
    id: 'jfb_050l',
    statement: 'Gradle is the primary build tool for _____ development.',
    answer: 'Android',
    topicId: 'java_build_tools',
    hint: 'Mobile platform',
  ),
  FillBlankQuestion(
    id: 'jfb_050m',
    statement: 'The "mvn _____" command deletes the target folder for a clean build.',
    answer: 'clean',
    topicId: 'java_build_tools',
    hint: 'Remove build artifacts',
  ),
  FillBlankQuestion(
    id: 'jfb_050n',
    statement: 'Gradle is generally _____ than Maven due to incremental builds.',
    answer: 'faster',
    topicId: 'java_build_tools',
    hint: 'Performance advantage',
  ),
  FillBlankQuestion(
    id: 'jfb_050o',
    statement: 'Maven uses _____ for plugins and dependency configuration.',
    answer: 'plugins',
    topicId: 'java_build_tools',
    hint: 'Extend build functionality',
  ),

  // Spring Boot Framework Basics
  FillBlankQuestion(
    id: 'jfb_051',
    statement: 'Spring Boot simplifies development of standalone, _____ -ready Spring applications.',
    answer: 'production',
    topicId: 'java_spring_boot',
    hint: 'Deployment environment',
  ),
  FillBlankQuestion(
    id: 'jfb_051a',
    statement: 'Spring Boot _____ applications, reducing boilerplate configuration.',
    answer: 'auto-configures',
    topicId: 'java_spring_boot',
    hint: 'Automatic setup',
  ),
  FillBlankQuestion(
    id: 'jfb_051b',
    statement: 'Spring Boot provides embedded servers like _____ and Jetty.',
    answer: 'Tomcat',
    topicId: 'java_spring_boot',
    hint: 'Default embedded server',
  ),
  FillBlankQuestion(
    id: 'jfb_051c',
    statement: 'Spring Boot uses _____ over configuration for rapid development.',
    answer: 'convention',
    topicId: 'java_spring_boot',
    hint: 'Standards-based approach',
  ),
  FillBlankQuestion(
    id: 'jfb_051d',
    statement: 'The _____ annotation enables auto-configuration in Spring Boot.',
    answer: '@SpringBootApplication',
    topicId: 'java_spring_boot',
    hint: 'Main application annotation',
  ),
  FillBlankQuestion(
    id: 'jfb_051e',
    statement: 'Spring Boot Starter _____ provide predefined dependencies for quick setup.',
    answer: 'POMs',
    topicId: 'java_spring_boot',
    hint: 'Project Object Model files',
  ),
  FillBlankQuestion(
    id: 'jfb_051f',
    statement: 'Spring Boot _____ provides health, metrics, and monitoring endpoints.',
    answer: 'Actuator',
    topicId: 'java_spring_boot',
    hint: 'Production monitoring tool',
  ),
  FillBlankQuestion(
    id: 'jfb_051g',
    statement: 'Spring _____ is a web-based tool to quickly generate projects.',
    answer: 'Initializr',
    topicId: 'java_spring_boot',
    hint: 'Project generator',
  ),
  FillBlankQuestion(
    id: 'jfb_051h',
    statement: 'The _____ annotation marks a class as a REST endpoint.',
    answer: '@RestController',
    topicId: 'java_spring_boot',
    hint: 'REST API controller',
  ),
  FillBlankQuestion(
    id: 'jfb_051i',
    statement: 'The _____ annotation maps HTTP GET requests to methods.',
    answer: '@GetMapping',
    topicId: 'java_spring_boot',
    hint: 'HTTP GET handler',
  ),
  FillBlankQuestion(
    id: 'jfb_051j',
    statement: 'Spring Boot configuration is externalized in _____ or application.yml.',
    answer: 'application.properties',
    topicId: 'java_spring_boot',
    hint: 'Properties file',
  ),
  FillBlankQuestion(
    id: 'jfb_051k',
    statement: 'The _____ annotation marks service layer classes in Spring.',
    answer: '@Service',
    topicId: 'java_spring_boot',
    hint: 'Business logic layer',
  ),
  FillBlankQuestion(
    id: 'jfb_051l',
    statement: 'Spring automatically injects beans using _____ injection.',
    answer: 'constructor',
    topicId: 'java_spring_boot',
    hint: 'Dependency injection method',
  ),
  FillBlankQuestion(
    id: 'jfb_051m',
    statement: 'The Actuator health endpoint is accessed at _____ .',
    answer: '/actuator/health',
    topicId: 'java_spring_boot',
    hint: 'Health check URL',
  ),
  FillBlankQuestion(
    id: 'jfb_051n',
    statement: 'The _____ annotation maps HTTP POST requests to methods.',
    answer: '@PostMapping',
    topicId: 'java_spring_boot',
    hint: 'HTTP POST handler',
  ),
  FillBlankQuestion(
    id: 'jfb_051o',
    statement: 'Spring Boot supports _____ APIs, database integration, and microservices.',
    answer: 'REST',
    topicId: 'java_spring_boot',
    hint: 'Web service architecture',
  ),

  // Java Project Best Practices & Code Optimization
  FillBlankQuestion(
    id: 'jfb_052',
    statement: 'Java best practices ensure readable, _____ , and scalable code.',
    answer: 'maintainable',
    topicId: 'java_best_practices',
    hint: 'Easy to modify and update',
  ),
  FillBlankQuestion(
    id: 'jfb_052a',
    statement: 'Code optimization improves performance, _____ usage, and efficiency.',
    answer: 'memory',
    topicId: 'java_best_practices',
    hint: 'RAM consumption',
  ),
  FillBlankQuestion(
    id: 'jfb_052b',
    statement: 'Class names should follow _____ naming convention.',
    answer: 'PascalCase',
    topicId: 'java_best_practices',
    hint: 'First letter capitalized',
  ),
  FillBlankQuestion(
    id: 'jfb_052c',
    statement: 'Methods and variables should use _____ naming convention.',
    answer: 'camelCase',
    topicId: 'java_best_practices',
    hint: 'First word lowercase',
  ),
  FillBlankQuestion(
    id: 'jfb_052d',
    statement: 'Constants should use _____ naming convention.',
    answer: 'UPPER_CASE',
    topicId: 'java_best_practices',
    hint: 'All capitals with underscores',
  ),
  FillBlankQuestion(
    id: 'jfb_052e',
    statement: 'The _____ principle states "Don\'t Repeat Yourself".',
    answer: 'DRY',
    topicId: 'java_best_practices',
    hint: 'Avoid code duplication',
  ),
  FillBlankQuestion(
    id: 'jfb_052f',
    statement: 'Use _____ for string concatenation inside loops.',
    answer: 'StringBuilder',
    topicId: 'java_best_practices',
    hint: 'Mutable string class',
  ),
  FillBlankQuestion(
    id: 'jfb_052g',
    statement: 'The _____ layer handles business logic in layered architecture.',
    answer: 'Service',
    topicId: 'java_best_practices',
    hint: 'Business rules layer',
  ),
  FillBlankQuestion(
    id: 'jfb_052h',
    statement: 'Use _____ for fast key-value lookups in Java.',
    answer: 'HashMap',
    topicId: 'java_best_practices',
    hint: 'Hash-based map',
  ),
  FillBlankQuestion(
    id: 'jfb_052i',
    statement: 'Use _____ or Log4j for logging instead of System.out.println.',
    answer: 'SLF4J',
    topicId: 'java_best_practices',
    hint: 'Simple Logging Facade',
  ),
  FillBlankQuestion(
    id: 'jfb_052j',
    statement: '_____ initialization loads objects only when needed.',
    answer: 'Lazy',
    topicId: 'java_best_practices',
    hint: 'On-demand loading',
  ),
  FillBlankQuestion(
    id: 'jfb_052k',
    statement: 'Use _____ for fast access in collections.',
    answer: 'ArrayList',
    topicId: 'java_best_practices',
    hint: 'Index-based list',
  ),
  FillBlankQuestion(
    id: 'jfb_052l',
    statement: 'Use _____ for frequent insertions and deletions in collections.',
    answer: 'LinkedList',
    topicId: 'java_best_practices',
    hint: 'Node-based list',
  ),
  FillBlankQuestion(
    id: 'jfb_052m',
    statement: '_____ is a profiling tool for monitoring Java applications.',
    answer: 'JVisualVM',
    topicId: 'java_best_practices',
    hint: 'Visual monitoring tool',
  ),
  FillBlankQuestion(
    id: 'jfb_052n',
    statement: 'SOLID includes Single responsibility, Open/closed, Liskov, Interface segregation, and _____ inversion.',
    answer: 'Dependency',
    topicId: 'java_best_practices',
    hint: 'DI principle',
  ),
  FillBlankQuestion(
    id: 'jfb_052o',
    statement: 'Use _____ for version control in Java projects.',
    answer: 'Git',
    topicId: 'java_best_practices',
    hint: 'Distributed version control',
  ),
];

// Combined list of all fill-in-the-blank questions
final List<FillBlankQuestion> allFillBlankQuestions = [
  ...javaFillBlankQuestions,
  ...dbmsFillBlankQuestions,
];
